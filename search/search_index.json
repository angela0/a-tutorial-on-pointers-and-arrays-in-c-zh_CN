{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"A TUTUOIAL ON POINTERS AND ARRAYS IN C by Ted Jensen Version 1.2 (PDF Version) Sept. 2003 This material is hereby placed in the public domain Available in various formats via http://pweb.netcom.com/~tjensen/ptr/cpoint.htm C\u6307\u9488\u4e0e\u6570\u7ec4 \u4f5c\u8005\uff1aTed Jensen \u7ffb\u8bd1\uff1aAngela \u539f\u6587\u53ef\u5728 http://pweb.netcom.com/~tjensen/ptr/cpoint.htm \u67e5\u770b\u3002 \u5176\u5b83 PDF \u53ef\u5728 https://pdos.csail.mit.edu/6.828/2014/readings/pointers.pdf \u8fd9\u91cc\u627e\u5230\u3002 \u76ee\u5f55 \u00b6 \u524d\u8a00 \u4ecb\u7ecd CHAPTER 1: \u4ec0\u4e48\u662f\u6307\u9488\uff1f CHAPTER 2: \u6307\u9488\u7c7b\u578b\u4e0e\u6570\u7ec4 CHAPTER 3: \u6307\u9488\u4e0e\u5b57\u7b26\u4e32 CHAPTER 4: \u518d\u8c08\u5b57\u7b26\u4e32 CHAPTER 5: \u6307\u9488\u4e0e\u7ed3\u6784\u4f53 CHAPTER 6: \u5b57\u7b26\u4e32\u65b0\u8c08\u53ca\u5b57\u7b26\u4e32\u6570\u7ec4 CHAPTER 7: \u518d\u8c08\u591a\u7ef4\u6570\u7ec4 CHAPTER 8: \u6307\u5411\u6570\u7ec4\u7684\u6307\u9488 CHAPTER 9: \u6307\u9488\u4e0e\u52a8\u6001\u5206\u914d\u5185\u5b58 CHAPTER 10: \u6307\u5411\u51fd\u6570\u7684\u6307\u9488 \u5c3e\u58f0","title":"Home"},{"location":"#TOC","text":"\u524d\u8a00 \u4ecb\u7ecd CHAPTER 1: \u4ec0\u4e48\u662f\u6307\u9488\uff1f CHAPTER 2: \u6307\u9488\u7c7b\u578b\u4e0e\u6570\u7ec4 CHAPTER 3: \u6307\u9488\u4e0e\u5b57\u7b26\u4e32 CHAPTER 4: \u518d\u8c08\u5b57\u7b26\u4e32 CHAPTER 5: \u6307\u9488\u4e0e\u7ed3\u6784\u4f53 CHAPTER 6: \u5b57\u7b26\u4e32\u65b0\u8c08\u53ca\u5b57\u7b26\u4e32\u6570\u7ec4 CHAPTER 7: \u518d\u8c08\u591a\u7ef4\u6570\u7ec4 CHAPTER 8: \u6307\u5411\u6570\u7ec4\u7684\u6307\u9488 CHAPTER 9: \u6307\u9488\u4e0e\u52a8\u6001\u5206\u914d\u5185\u5b58 CHAPTER 10: \u6307\u5411\u51fd\u6570\u7684\u6307\u9488 \u5c3e\u58f0","title":"\u76ee\u5f55"},{"location":"chapter1/","text":"\u4e0d\u53ef\u907f\u514d\u5730\uff0cC \u8bed\u8a00\u65b0\u624b\u89c9\u5f97\u6307\u9488\u7684\u6982\u5ff5\u5f88\u96be\u7406\u89e3\u3002\u8fd9\u4e2a\u6559\u7a0b\u7684\u76ee\u7684\u5c31\u662f\u7ed9\u8fd9\u4e9b\u65b0\u624b\u4e00\u4e9b\u6307\u9488\u7684\u4ecb\u7ecd\u4ee5\u53ca\u4f7f\u7528\u3002 \u6211\u53d1\u73b0\u65b0\u624b\u4eec\u7684\u6307\u9488\u95ee\u9898\u7684\u4e3b\u8981\u539f\u56e0\u662f\uff0c\u4ed6\u4eec\u5bf9\u53d8\u91cf\uff08\u5f53\u7136\u662f C \u4e2d\u7684\u53d8\u91cf\uff09\u7684\u611f\u89c9\u5f88\u5f31\uff0c\u751a\u81f3\u8bf4\u662f\u5fae\u4e4e\u5176\u5fae\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5148\u5927\u4f53\u4e0a\u4ece C \u7684\u53d8\u91cf\u8ba8\u8bba\u4e00\u4e0b\u3002 \u7a0b\u5e8f\u4e2d\u7684\u53d8\u91cf\u5c31\u662f\u4e00\u4ef6\u6709\u540d\u5b57\u7684\u4e1c\u897f\uff0c\u4ed6\u7684\u503c\u662f\u53ef\u4ee5\u6539\u53d8\u7684\u3002\u7f16\u8bd1\u5668\u548c\u8fde\u63a5\u5668\u5904\u7406\u5b83\u7684\u65b9\u5f0f\u662f\u5728\u8ba1\u7b97\u673a\u7684\u5185\u5b58\u4e2d\u5206\u914d\u4e00\u4e2a\u5757\u53bb\u653e\u8be5\u53d8\u91cf\u7684\u503c\u3002\u5757\u7684\u5927\u5c0f\u53d6\u51b3\u4e8e\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\u5141\u8bb8\u6539\u53d8\u7684\u8303\u56f4\u3002\u6bd4\u5982\uff0c\u5728 PC \u91cc\uff0c\u6574\u578b\u53d8\u91cf\u7684\u5927\u5c0f\u662f 2 \u5b57\u8282\uff0c\u800c\u957f\u6574\u578b\u7684\u5927\u5c0f\u662f 4 \u5b57\u8282\u3002\u5728 C \u91cc\u9762\uff0c\u4e00\u4e2a\u5982\u6574\u578b\u8fd9\u6837\u7684\u53d8\u91cf\u7c7b\u578b\uff0c\u7531\u4e8e\u673a\u5668\u7684\u4e0d\u540c\uff0c\u5176\u5927\u5c0f\u4e5f\u4e0d\u5c3d\u76f8\u540c\u3002 \u4f46\u6211\u4eec\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u6211\u4eec\u7ed9\u7f16\u8bd1\u5668\u4f20\u9012\u4e86 2 \u4e2a\u4fe1\u606f\uff1a\u53d8\u91cf\u7684\u540d\u5b57\u548c\u53d8\u91cf\u7684\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u58f0\u660e\u4e00\u4e2a\u53eb k \u7684\u6574\u578b\u53d8\u91cf\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a int k; \u4e00\u770b\u5230\u8fd9\u4e2a\u8bed\u53e5\u91cc \u201cint\u201d \u8fd9\u4e00\u90e8\u5206\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u5206\u914d 2 \u5b57\u8282\u5185\u5b58\u53bb\u653e\u8fd9\u4e2a\u6574\u6570\u7684\u503c\u3002\u7f16\u8bd1\u5668\u4f1a\u5efa\u4e00\u4e2a\u7b26\u53f7\u8868\uff0c\u5e76\u5728\u5206\u914d\u5185\u5b58\u7684\u540c\u65f6\u5c06\u8fd9\u4e2a\u7b26\u53f7 k \u4ee5\u53ca\u4e0e\u4e4b\u5173\u8054\u7684\u5185\u5b58\u5730\u5740\u52a0\u8fdb\u53bb\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u6211\u4eec\u4e0b\u9762\u8fd9\u6837\u5199\uff1a k = 2; \u6211\u4eec\u671f\u671b\uff0c\u5728\u8fd0\u884c\u7684\u65f6\u5019\u6267\u884c\u5230\u8fd9\u4e2a\u8bed\u53e5\uff0c2 \u8fd9\u4e2a\u503c\u5c06\u88ab\u653e\u5230\u4e3a k \u7684\u503c\u4fdd\u7559\u7684\u5185\u5b58\u5730\u5740\u3002\u5728 C \u91cc\u9762\uff0c\u6211\u4eec\u79f0\u50cf k \u8fd9\u6837\u7684\u53d8\u91cf\u4e3a\u201c\u5bf9\u8c61\u201d\u3002 \u5728\u5b9e\u9645\u610f\u4e49\u4e0a\uff0c\u8fd9\u91cc\u6709 2 \u4e2a\u503c\u548c\u5bf9\u8c61 k \u6709\u5173\u7cfb\u3002\u4e00\u4e2a\u662f\u50a8\u5b58\u5728\u90a3\u91cc\u7684\u6574\u6570\u503c\uff08\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\u662f 2\uff09\uff0c\u53e6\u4e00\u4e2a\u662f\u5185\u5b58\u5730\u5740\u7684\u503c\uff08\u4f8b\u5b50\u4e2d\u662f k \u7684\u5730\u5740\uff09\u3002\u4e00\u4e9b\u6587\u7ae0\u628a\u8fd9 2 \u4e2a\u503c\u5206\u522b\u53eb\u505a rvalue \uff08right value \u53f3\u503c, \u8bfb\u4f5c \u2018are value\u2019\uff09\u548c lvalue \uff08left value \u5de6\u503c, \u8bfb\u4f5c\u2018el value\u2019\uff09\u3002 \u5728\u4e00\u4e9b\u8bed\u8a00\u91cc\u9762\uff0c\u5de6\u503c\u662f\u88ab\u5141\u8bb8\u653e\u5728\u590d\u5236\u64cd\u4f5c\u7b26 \u2018=\u2019 \u5de6\u8fb9\u7684\u503c\uff08\u4e5f\u5c31\u662f\u53f3\u8fb9\u8868\u8fbe\u5f0f\u8ba1\u7b97\u7ed3\u679c\u7684\u5730\u5740\uff09\u3002\u53f3\u503c\u662f\u5728\u8d4b\u503c\u8bed\u53e5\u7684\u53f3\u8fb9\uff0c\u5982\u4e0a\u9762\u4ee3\u7801\u4e2d\u7684 2 \u3002\u53f3\u503c\u662f\u4e0d\u5141\u8bb8\u653e\u5728\u8d4b\u503c\u8bed\u53e5\u7684\u5de6\u8fb9\u3002\u5982 2 = k \u5c31\u662f\u975e\u6cd5\u7684\u3002 \u5b9e\u9645\u4e0a\uff0c\u4e0a\u8ff0\u5de6\u503c\u7684\u5b9a\u4e49\u7528\u5728 C \u91cc\u9762\u7684\u65f6\u5019\u7a0d\u7a0d\u505a\u4e86\u4fee\u6539\u3002\u6839\u636e K&R II (page 197): 1 \" \u5bf9\u8c61 \u662f\u547d\u540d\u4e86\u7684\u50a8\u5b58\u533a\u57df\uff0c\u800c \u5de6\u503c \u5c31\u662f\u5f15\u7528\u5bf9\u8c61\u7684\u8868\u8fbe\u5f0f\u3002\" \u8fd9\u6837\u7684\u8bdd\uff0c\u4e0a\u9762\u5f15\u7528\u7684\u5b9a\u4e49\u662f\u5f88\u5145\u5206\u7684\u3002\u4f46\u6211\u4eec\u66f4\u52a0\u719f\u6089\u6307\u9488\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ef\u4ee5\u63a2\u7a76\u66f4\u591a\u7684\u7ec6\u8282\u3002 \u597d\u4e86\uff0c\u6211\u4eec\u770b\u770b\u8fd9\u4e2a\uff1a int j, k; k = 2; j = 7; <--line 1 k = j; <--line 2 \u5728\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7f16\u8bd1\u5668\u89e3\u91ca line 1 \u7684 j \u4e3a\u53d8\u91cf j \uff08\u5b83\u7684\u5de6\u503c\uff09 \u7684\u5730\u5740\uff0c\u5e76\u628a\u503c 7 \u62f7\u8d1d\u5230\u90a3\u4e2a\u5730\u5740\u3002\u5728 line 2\uff0c\u8fd9\u65f6\uff0c j \u5c31\u88ab\u89e3\u91ca\u6210\u5b83\u7684\u53f3\u503c\uff08\u56e0\u4e3a\u5b83\u88ab\u653e\u5230\u8d4b\u503c\u64cd\u4f5c\u7b26 \u2018=\u2019 \u53f3\u8fb9\uff09\u3002\u4e5f\u5c31\u662f\uff0c\u8fd9\u91cc\u7684 j \u5f15\u7528 \u50a8\u5b58 \u5728\u4e3a\u53d8\u91cf j \u5206\u914d\u7684\u5185\u5b58\u5730\u5740\u91cc\u9762\u7684\u503c\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u5c31\u662f 7 \u3002\u56e0\u6b64 7 \u88ab\u62f7\u8d1d\u5230\u6709 k \u7684\u5de6\u503c\u6307\u5b9a\u7684\u5730\u5740\u3002 \u5728\u4e0a\u9762\u6240\u6709\u4f8b\u5b50\u4e2d\uff0c\u6211\u4eec\u90fd\u662f\u4f7f\u7528 2 \u5b57\u8282\u7684\u6574\u6570\uff0c\u56e0\u6b64\uff0c\u6240\u6709\u53f3\u503c\u4ece\u4e00\u4e2a\u5730\u65b9\u62f7\u8d1d\u5230\u53e6\u5916\u4e00\u4e2a\u5730\u65b9\u90fd\u662f\u62f7\u8d1d 2 \u4e2a\u5b57\u8282\u3002\u5047\u5982\u6211\u4eec\u4f7f\u7528\u957f\u6574\u578b\uff0c\u5c06\u4f1a\u62f7\u8d1d 4 \u4e2a\u5b57\u8282\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u8c08\u8c08\u9700\u8981\u4e00\u4e2a\u53d8\u91cf\u6765\u5b58\u653e\u5de6\u503c\uff08\u5730\u5740\uff09\u7684\u539f\u56e0\u3002\u5b58\u653e\u8fd9\u6837\u4e00\u4e2a\u503c\u9700\u8981\u7684\u5927\u5c0f\u53d6\u51b3\u4e8e\u7cfb\u7edf\u3002\u5728\u8001\u7684 64k \u5185\u5b58\u7684\u684c\u9762\u7535\u8111\u4e0a\uff0c\u5185\u5b58\u4e2d\u4efb\u610f\u70b9\u7684\u5730\u5740\u90fd\u53ef\u4ee5\u7528 2 \u5b57\u8282\u8868\u793a\u51fa\u6765\u3002\u5185\u5b58\u8d8a\u5927\uff0c\u5c31\u9700\u8981\u8d8a\u591a\u7684\u5b57\u8282\u53bb\u5b58\u653e\u4e00\u4e2a\u5730\u5740\u3002\u5728\u4e00\u4e9b\u8ba1\u7b97\u673a\u91cc\uff0c\u5982 IBM PC \u6709\u65f6\u53ef\u80fd\u9700\u8981\u7279\u6b8a\u5904\u7406\u624d\u80fd\u653e\u4e0b\u4e00\u4e2a\u6bb5\u548c\u504f\u79fb\u91cf\u3002\u53ea\u8981\u6211\u4eec\u80fd\u544a\u8bc9\u7f16\u8bd1\u5668\u6211\u4eec\u8981\u50a8\u5b58\u7684\u662f\u4e00\u4e2a\u5730\u5740\uff0c\u90a3\u9700\u8981\u7684\u5b9e\u9645\u5927\u5c0f\u4fbf\u4e0d\u90a3\u4e48\u91cd\u8981\u4e86\u3002 \u8fd9\u6837\u7684\u53d8\u91cf\u88ab\u79f0\u4f5c \u6307\u9488\u53d8\u91cf \uff08\u5177\u4f53\u539f\u56e0\uff0c\u9a6c\u4e0a\u5c31\u80fd\u660e\u767d\uff09\u3002\u5728 C \u91cc\u9762\uff0c\u5f53\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u6307\u9488\u53d8\u91cf\u65f6\uff0c\u8981\u5728\u53d8\u91cf\u540d\u524d\u9762\u52a0\u4e00\u4e2a\u661f\u53f7\u3002\u540c\u6837\u4e5f\u9700\u8981\u7ed9\u6307\u9488\u53d8\u91cf\u4e00\u4e2a\u7c7b\u578b\uff0c\u8fd9\u4e2a\u7c7b\u578b\u5c31\u662f\u50a8\u5b58\u5728\u8be5\u6307\u9488\u53d8\u91cf\u7684\u90a3\u4e2a\u5730\u5740\u91cc\u7684\u6570\u636e\u7684\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u8fd9\u6837\u58f0\u660e\u6307\u9488\u53d8\u91cf\uff1a int *ptr; ptr \u662f\u53d8\u91cf\u7684\u540d\u5b57\uff08\u5c31\u50cf\u4e0a\u9762\u58f0\u660e\u7684\u6574\u578b\u53d8\u91cf k \u4e00\u6837\uff09\u3002\u8fd9\u4e2a * \u544a\u8bc9\u7f16\u8bd1\u5668\u6211\u4eec\u60f3\u8981\u4e00\u4e2a\u6307\u9488\u53d8\u91cf\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8981\u5f00\u8f9f\u4e0d\u7ba1\u591a\u5c11\u4e2a\u5b57\u8282\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u88ab\u7528\u6765\u5b58\u50a8\u5185\u5b58\u4e2d\u7684\u5730\u5740\u3002 int \u8868\u660e\u6211\u4eec\u8981\u7528\u8fd9\u4e2a\u53d8\u91cf\u53bb\u5b58\u50a8\u4e00\u4e2a\u6574\u6570\u7684\u5730\u5740\u3002\u8fd9\u6837\u4e00\u4e2a\u6307\u9488\uff0c\u53ef\u4ee5\u8bf4\u6210\u201c\u6307\u5411\u201d\u4e00\u4e2a\u6574\u6570\u3002\u7136\u800c\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f53\u6211\u4eec\u5199 int k; \u65f6\uff0c\u5e76\u6ca1\u6709\u7ed9 k \u4e00\u4e2a\u503c\u3002\u5982\u679c\u6211\u4eec\u628a\u8fd9\u4e2a\u8bed\u53e5\u5199\u5728\u4efb\u4f55\u51fd\u6570\u5916\u9762\uff08\u8bd1\u6ce8\uff1a\u5305\u62ec main \u51fd\u6570\uff09\uff0c\u9075\u5faa ANSI \u6807\u51c6\u7684\u7f16\u8bd1\u5668\u4f1a\u628a\u5b83\u521d\u59cb\u5316\u4e3a 0\u3002\u540c\u6837\u7684\uff0c ptr \u6ca1\u6709\u503c\uff0c\u56e0\u4e3a\u5728\u4e0a\u9762\u7684\u58f0\u660e\u4e2d\u6211\u4eec\u6ca1\u6709\u5b58\u50a8\u4e00\u4e2a\u5730\u5740\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u628a\u58f0\u660e\u5199\u5728\u4efb\u4f55\u51fd\u6570\u5916\u9762\uff0c\u5b83\u5e94\u8be5\u88ab\u521d\u59cb\u5316\u4e00\u4e2a\u503c\uff0c\u4fdd\u8bc1\u5b83\u4e0d\u4f1a\u6307\u5411 C \u4e2d\u7684\u4efb\u4f55\u5bf9\u8c61\u548c\u51fd\u6570\u3002 \u7528\u8fd9\u79cd\u65b9\u6cd5\u521d\u59cb\u5316\u7684\u6307\u9488\uff0c\u79f0\u4e4b\u4e3a \u201cnull\u201d \u6307\u9488\uff08\u8bd1\u6ce8\uff1a\u5373\u7a7a\u6307\u9488\uff0c\u4f46\u540e\u6587\u4e2d\u90fd\u5199\u505a null \u6307\u9488\uff09\u3002 \u5b9e\u9645\u7528\u4e8e null \u6307\u9488\u7684\u4f4d\u6a21\u5f0f\u53ef\u80fd\u4f1a\u4e5f\u53ef\u80fd\u4e0d\u4f1a\u8ba1\u7b97\u6210 0\uff0c\u56e0\u4e3a\u5b83\u5f00\u53d1\u4ee3\u7801\u7684\u7279\u5b9a\u7cfb\u7edf\u3002\u4e3a\u4e86\u80fd\u8ba9\u6e90\u4ee3\u7801\u5728\u4e0d\u540c\u7cfb\u7edf\u4e0a\u7684\u4e0d\u540c\u7f16\u8bd1\u5668\u4e4b\u95f4\u517c\u5bb9\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2a\u5b8f\u5b9a\u4e49\u6765\u8868\u793a null \u6307\u9488\u3002\u8fd9\u4e2a\u5b8f\u53eb\u505a NULL \u3002\u56e0\u6b64\uff0c\u6211\u4eec\u628a\u6307\u9488\u7684\u503c\u8bbe\u7f6e\u4e3a NULL \u7684\u65f6\u5019\uff0c\u5982 ptr = NULL; \u8fd9\u6837\u7684\u8d4b\u503c\u8bed\u53e5\uff0c\u5c31\u4fdd\u8bc1\u4e86\u8fd9\u4e2a\u6307\u9488\u53d8\u6210\u4e00\u4e2a null \u6307\u9488\u3002\u7c7b\u4f3c\u7684\uff0c\u5c31\u50cf\u7528 if(k==0) \u6d4b\u8bd5\u4e00\u4e2a\u6574\u6570\u662f\u5426\u4e3a 0 \u90a3\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u7528 if(ptr==NULL) \u6765\u6d4b\u8bd5 ptr \u662f\u5426\u4e3a null \u6307\u9488\u3002 \u56de\u5230\u6211\u4eec\u7684\u65b0\u53d8\u91cf ptr \u4e0a\u9762\u3002\u5047\u8bbe\u60f3\u8981\u5728 ptr \u4e2d\u5b58\u50a8\u53d8\u91cf k \u7684\u5730\u5740\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u5143\u5143\u7b97\u7b26 & \uff0c\u8fd9\u6837\u5199\uff1a ptr = &k; & \u64cd\u4f5c\u7b26\u6240\u505a\u7684\u5c31\u662f\u53d6\u5f97\u53d8\u91cf k \u7684\u5de6\u503c\uff08\u5730\u5740\uff09\uff0c\u5373\u4f7f\u5b83\u662f\u5728\u8d4b\u503c\u64cd\u4f5c\u7b26\u53f3\u8fb9\uff0c\u5e76\u4e14 & \u5c06\u53d6\u5f97\u7684\u5185\u5bb9\u62f7\u8d1d\u7ed9\u6211\u4eec\u7684\u6307\u9488 ptr \u3002\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u8bf4 ptr \u6307\u5411 k \u3002\u8010\u5fc3\u4e00\u70b9\uff0c\u6211\u4eec\u53ea\u9700\u8981\u518d\u8ba8\u8bba\u4e00\u4e2a\u64cd\u4f5c\u7b26\u3002 \u201c\u9006\u5f15\u7528\u64cd\u4f5c\u7b26\u201d\uff08\u8bd1\u6ce8\uff1a\u4e5f\u53eb\u505a \u95f4\u63a5\u64cd\u4f5c\u7b26\uff09\u5c31\u662f\u4e00\u4e2a\u661f\u53f7\uff0c\u6211\u4eec\u8fd9\u6837\u7528\uff1a *ptr = 7; \u8fd9\u4e2a\u8bed\u53e5\u4f1a\u628a 7 \u62f7\u8d1d\u7ed9 ptr \u6307\u5411\u7684\u5730\u5740\u3002\u56e0\u6b64\u5982\u679c ptr \u6307\u5411\u53d8\u91cf k \uff08\u6709 k \u7684\u5730\u5740\uff09\uff0c\u8fd9\u4e2a\u8bed\u53e5\u5c31\u4f1a\u628a k \u7684\u503c\u8bbe\u7f6e\u4e3a 7\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5f53\u6211\u4eec\u7528 * \u8fd9\u79cd\u65b9\u5f0f\u65f6\uff0c\u6211\u4eec\u5f15\u7528\u7684\u662f ptr \u6307\u5411\u7684\u90a3\u4e2a\u503c\uff0c\u800c\u4e0d\u662f ptr \u81ea\u8eab\u7684\u503c\u3002 \u7c7b\u4f3c\u5730\uff0c\u6211\u4eec\u8fd9\u6837\u5199\uff1a printf(\"%d\\n\",*ptr); \u5c31\u53ef\u4ee5\u628a ptr \u6240\u6307\u5730\u5740\u91cc\u5b58\u50a8\u7684\u503c\u6253\u5370\u5230\u5c4f\u5e55\u3002 \u8981\u770b\u770b\u4e0a\u9762\u8fd9\u4e9b\u4e1c\u897f\u600e\u4e48\u653e\u5728\u4e00\u8d77\uff0c\u5c31\u8fd0\u884c\u4e00\u4e0b\u4e0b\u9762\u7684\u7a0b\u5e8f\uff0c\u5e76\u81ea\u4e60\u5ba1\u67e5\u4e00\u4e0b\u4ee3\u7801\u548c\u8f93\u51fa\uff1a ------------ Program 1.1 --------------------------------- /* Program 1.1 from PTRTUT10.TXT 6/10/97 */ #include <stdio.h> int j, k; int *ptr; int main(void) { j = 1; k = 2; ptr = &k; printf(\"\\n\"); printf(\"j has the value %d and is stored at %p\\n\", j, (void *)&j); printf(\"k has the value %d and is stored at %p\\n\", k, (void *)&k); printf(\"ptr has the value %p and is stored at %p\\n\", ptr, (void *)&ptr); printf(\"The value of the integer pointed to by ptr is %d\\n\", *ptr); return 0; } \u6ce8\u610f\uff1a\u6211\u4eec\u5fc5\u987b\u8981\u8ba8\u8bba\u8fd9\u91cc\u7528\u5230\u7684 (void *) \u8868\u8fbe\u5f0f\u7684\u7528\u6cd5\u3002\u4f46\u8fd9\u91cc\uff0c\u5148\u52a0\u5230\u4f60\u7684\u6d4b\u8bd5\u4ee3\u7801\u91cc\uff0c\u6211\u4eec\u968f\u540e\u4f1a\u89e3\u91ca\u539f\u56e0\u7684\u3002 \u56de\u987e\uff1a \u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\u8981\u7ed9\u4e00\u4e2a\u7c7b\u578b\u548c\u4e00\u4e2a\u540d\u5b57\uff08\u5982\uff1a int k; \uff09 \u58f0\u660e\u4e00\u4e2a\u6307\u9488\u53d8\u91cf\u540c\u6837\u8981\u7ed9\u4e00\u4e2a\u7c7b\u578b\u548c\u4e00\u4e2a\u540d\u5b57\uff08\u5982\uff1a int *ptr; \uff09\uff0c\u8fd9\u91cc\u7684 * \u544a\u8bc9\u7f16\u8bd1\u5668\u6211\u4eec\u58f0\u660e\u7684\u662f\u4e00\u4e2a\u6307\u9488\u53d8\u91cf\uff0c\u7c7b\u578b\u5219\u544a\u8bc9\u7f16\u8bd1\u5668\u6211\u4eec\u58f0\u660e\u7684\u6307\u9488\u53d8\u91cf\u6307\u5411\u7684\u5730\u5740\u5b58\u50a8\u7684\u662f\u4ec0\u4e48\u7c7b\u578b\u7684\u6570\u636e\uff08\u5728\u6211\u4eec\u7684\u4f8b\u5b50\u4e2d\u662f int \uff09 \u53ea\u8981\u58f0\u660e\u4e86\u4e00\u4e2a\u53d8\u91cf\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u5728\u5b83\u7684\u540d\u5b57\u524d\u52a0\u4e00\u4e2a\u4e00\u5143\u8fd0\u7b97\u7b26 & \u6765\u83b7\u53d6\u5b83\u7684\u5730\u5740\uff0c\u5982 &k \u6211\u4eec\u53ef\u4ee5\u9006\u5f15\u7528\u4e00\u4e2a\u6307\u9488\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ef\u4ee5\u5f15\u7528\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u7684\u5730\u5740\u5b58\u50a8\u7684\u503c\uff0c\u53ea\u9700\u8981\u50cf *ptr \u8fd9\u6837\u4f7f\u7528\u4e00\u5143\u8fd0\u7b97\u7b26 * \u5c31\u53ef\u4ee5\u4e86 \u53d8\u91cf\u7684\u5de6\u503c\u5c31\u662f\u5b83\u7684\u5730\u5740\uff0c\u4e5f\u5c31\u662f\u5b83\u5728\u5185\u5b58\u4e2d\u5b58\u50a8\u7684\u4f4d\u7f6e\uff1b\u53f3\u503c\u5c31\u662f\u5728\u53d8\u91cf\u4e2d\uff08\u5185\u5b58\u5730\u5740\u4e2d\uff09\u5b58\u50a8\u7684\u503c\u3002 \"The C Programming Language\" 2nd Edition B. Kernighan and D. Ritchie Prentice Hall ISBN 0-13-110362-8 \u21a9","title":"Chapter1 \u4ec0\u4e48\u662f\u6307\u9488"},{"location":"chapter10/","text":"\u5230\u8fd9\u91cc\uff0c\u6211\u4eec\u5df2\u7ecf\u8ba8\u8bba\u8fc7\u6307\u5411\u6570\u636e\u5bf9\u8c61\u7684\u6307\u9488\u3002C \u91cc\u9762\u4e5f\u5141\u8bb8\u58f0\u660e\u6307\u9488\u51fd\u6570\u7684\u6307\u9488\u3002\u51fd\u6570\u6307\u9488\u6709\u5f88\u591a\u7528\u9014\uff0c\u8fd9\u91cc\u8ba8\u8bba\u4e00\u90e8\u5206\u3002 \u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u5b9e\u9645\u95ee\u9898\u3002\u4f60\u60f3\u5199\u4e00\u4e2a\u51fd\u6570\uff0c\u5b83\u80fd\u591f\u5b9e\u9645\u5730\u6392\u5e8f\u4efb\u4f55\u6570\u636e\u96c6\u5408\uff0c\u8fd9\u4e9b\u6570\u636e\u5b58\u50a8\u5728\u6570\u7ec4\u4e2d\u3002\u53ef\u80fd\u4f1a\u662f\u5b57\u7b26\u4e32\u6570\u7ec4\u3001\u6574\u578b\u6570\u7ec4\u3001\u6d6e\u70b9\u6570\u6570\u7ec4\uff0c\u751a\u81f3\u662f\u7ed3\u6784\u4f53\u6570\u7ec4\u3002\u6392\u5e8f\u7b97\u6cd5\u5bf9\u6240\u6709\u7684\u7c7b\u578b\u90fd\u662f\u4e00\u6837\u7684\u3002\u4f8b\u5982\uff0c\u53ef\u4ee5\u662f\u7b80\u5355\u7684\u5192\u6ce1\u6392\u5e8f\uff0c\u6216\u8005\u662f\u66f4\u590d\u6742\u7684\u5e0c\u5c14\u6392\u5e8f\u3001\u5feb\u901f\u6392\u5e8f\u7b49\u3002\u4e3a\u4e86\u6f14\u793a\u76ee\u7684\uff0c\u6211\u4eec\u5c31\u7528\u4e00\u4e2a\u7b80\u5355\u7684\u5192\u6ce1\u6392\u5e8f\u3002 Sedgewick 1 \u66fe\u7ecf\u7528 C \u901a\u8fc7\u6784\u5efa\u51fd\u6570\u6765\u5b9e\u73b0\u5192\u6ce1\u6392\u5e8f\uff0c\u4f20\u7ed9\u51fd\u6570\u4e00\u4e2a\u6570\u7ec4\u7684\u6307\u9488\uff0c\u5c31\u80fd\u88ab\u6392\u5e8f\u3002\u5982\u679c\u6211\u4eec\u628a\u8fd9\u4e2a\u51fd\u6570\u53eb\u505a bubble() \uff0c\u6392\u5e8f\u7a0b\u5e8f\u5c31\u50cf\u4e0b\u9762 bubble_1.c \u63cf\u8ff0\u7684\u90a3\u6837\uff1a /*-------------------- bubble_1.c --------------------*/ /* Program bubble_1.c from PTRTUT10.HTM 6/13/97 */ #include <stdio.h> int arr[10] = { 3,6,1,2,3,8,4,1,7,2}; void bubble(int a[], int N); int main(void) { int i; putchar('\\n'); for (i = 0; i < 10; i++) { printf(\"%d \", arr[i]); } bubble(arr,10); putchar('\\n'); for (i = 0; i < 10; i++) { printf(\"%d \", arr[i]); } return 0; } void bubble(int a[], int N) { int i, j, t; for (i = N-1; i >= 0; i--) { for (j = 1; j <= i; j++) { if (a[j-1] > a[j]) { t = a[j-1]; a[j-1] = a[j]; a[j] = t; } } } } /*---------------------- end bubble_1.c -----------------------*/ \u5192\u6ce1\u6392\u5e8f\u662f\u4e00\u79cd\u6bd4\u8f83\u7b80\u5355\u7684\u6392\u5e8f\u3002\u8fd9\u4e2a\u7b97\u6cd5\u4ece\u7b2c\u4e8c\u4e2a\u626b\u63cf\u5230\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u628a\u6bcf\u4e00\u4e2a\u5143\u7d20\u90fd\u548c\u5b83\u524d\u9762\u7684\u5143\u7d20\u6bd4\u8f83\u3002\u5982\u679c\u524d\u9762\u7684\u90a3\u4e2a\u6bd4\u5f53\u524d\u7684\u5927\uff0c\u5c31\u4ea4\u6362\u5b83\u4eec\uff0c\u4f7f\u5f97\u6700\u5927\u7684\u5143\u7d20\u79bb\u5c3e\u90e8\u8d8a\u6765\u8d8a\u8fd1\u3002\u5728\u7b2c\u4e00\u8d9f\u6392\u5e8f\u4e2d\uff0c\u8fd9\u4f1a\u8ba9\u6700\u5927\u7684\u5143\u7d20\u79fb\u5230\u6570\u7ec4\u5c3e\u90e8\u3002\u73b0\u5728\u6570\u7ec4\u4ec5\u9650\u4e8e\u9664\u4e86\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u6240\u6709\u5143\u7d20\uff0c\u91cd\u590d\u4e0a\u9762\u7684\u8fc7\u7a0b\uff0c\u8fd9\u4f1a\u628a\u7b2c\u4e8c\u5927\u7684\u5143\u7d20\u653e\u5230\u6700\u5927\u7684\u5143\u7d20\u4e4b\u524d\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u4e00\u76f4\u91cd\u590d\u5143\u7d20\u4e2a\u6570\u51cf 1 \u6b21\u3002\u6700\u540e\u5f97\u5230\u4e00\u4e2a\u6392\u5e8f\u540e\u7684\u6570\u7ec4\u3002 \u8fd9\u91cc\u6211\u4eec\u7684\u51fd\u6570\u7528\u6765\u6392\u5e8f\u6574\u578b\u6570\u7ec4\u3002\u56e0\u6b64\u5728\u5faa\u73af\u4e2d\u7684\u7b2c 1 \u884c\u6211\u4eec\u6bd4\u8f83\u6574\u6570\u5927\u5c0f\uff0c\u7b2c 2 \u5230 4 \u884c\u7528\u4e86\u4e00\u4e2a\u4e34\u65f6\u6574\u6570\u3002\u73b0\u5728\uff0c\u6211\u4eec\u60f3\u8981\u7684\u662f\u770b\u770b\u80fd\u4e0d\u80fd\u628a\u8fd9\u4e2a\u51fd\u6570\u6539\u9020\u6210\u7528\u4e8e\u4efb\u4f55\u6570\u636e\u7c7b\u578b\uff0c\u800c\u4e0d\u53ea\u9650\u5236\u5728\u6574\u578b\u3002 \u540c\u65f6\uff0c\u6211\u4eec\u5e76\u4e0d\u60f3\u6bcf\u6b21\u4f7f\u7528\u8fd9\u4e2a\u90fd\u5206\u6790\u7b97\u6cd5\u4e0e\u4e4b\u76f8\u5173\u7684\u4ee3\u7801\u3002\u56e0\u6b64\u6211\u4eec\u7740\u624b\u628a\u6bd4\u8f83\u79fb\u51fa\u51fd\u6570 bubble() \uff0c\u4ee5\u4fbf\u4e8e\u6211\u4eec\u4fee\u6539\u6bd4\u8f83\u529f\u80fd\uff0c\u800c\u4e0d\u7528\u91cd\u5199\u4e0e\u5b9e\u9645\u7b97\u6cd5\u76f8\u5173\u7684\u90e8\u5206\u3002\u8fd9\u5c31\u6709\u4e86 bubble_2.c \uff1a /*---------------------- bubble_2.c -------------------------*/ /* Program bubble_2.c from PTRTUT10.HTM 6/13/97 */ /* Separating the comparison function */ #include <stdio.h> int arr[10] = { 3,6,1,2,3,8,4,1,7,2}; void bubble(int a[], int N); int compare(int m, int n); int main(void) { int i; putchar('\\n'); for (i = 0; i < 10; i++) { printf(\"%d \", arr[i]); } bubble(arr,10); putchar('\\n'); for (i = 0; i < 10; i++) { printf(\"%d \", arr[i]); } return 0; } void bubble(int a[], int N) { int i, j, t; for (i = N-1; i >= 0; i--) { for (j = 1; j <= i; j++) { if (compare(a[j-1], a[j])) { t = a[j-1]; a[j-1] = a[j]; a[j] = t; } } } } int compare(int m, int n) { return (m > n); } /*--------------------- end of bubble_2.c -----------------------*/ \u5982\u679c\u6211\u4eec\u7684\u76ee\u6807\u662f\u8ba9\u6392\u5e8f\u7a0b\u5e8f\u7684\u6570\u636e\u7c7b\u578b\u72ec\u7acb\uff0c\u4e00\u79cd\u65b9\u6cd5\u5c31\u662f\u4f7f\u7528 void \u6307\u9488\u6307\u5411\u8fd9\u4e2a\u6570\u636e\uff0c\u800c\u4e0d\u662f\u7528\u6574\u578b\u3002\u4e3a\u4e86\u671d\u8fd9\u4e2a\u65b9\u5411\u8fc8\u51fa\u7b2c\u4e00\u6b65\uff0c\u8ba9\u6211\u4eec\u4fee\u6539\u4e00\u4e9b\u5185\u5bb9\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6307\u9488\u3002\u4e00\u5f00\u59cb\uff0c\u6211\u4eec\u5148\u4f7f\u7528\u6574\u578b\u6307\u9488\uff1a /*----------------------- bubble_3.c -------------------------*/ /* Program bubble_3.c from PTRTUT10.HTM 6/13/97 */ #include <stdio.h> int arr[10] = { 3,6,1,2,3,8,4,1,7,2}; void bubble(int *p, int N); int compare(int *m, int *n); int main(void) { int i; putchar('\\n'); for (i = 0; i < 10; i++) { printf(\"%d \", arr[i]); } bubble(arr,10); putchar('\\n'); for (i = 0; i < 10; i++) { printf(\"%d \", arr[i]); } return 0; } void bubble(int *p, int N) { int i, j, t; for (i = N-1; i >= 0; i--) { for (j = 1; j <= i; j++) { if (compare(&p[j-1], &p[j])) { t = p[j-1]; p[j-1] = p[j]; p[j] = t; } } } } int compare(int *m, int *n) { return (*m > *n); } /*------------------ end of bubble3.c -------------------------*/ \u8bf7\u6ce8\u610f\u53d8\u5316\u3002\u6211\u4eec\u73b0\u5728\u4f20\u9012\u4e86\u4e00\u4e2a\u6574\u578b\u6307\u9488\uff08\u6216\u8005\u53eb\u6574\u578b\u6570\u7ec4\uff09\u7ed9 bubble() \u3002\u5e76\u4e14\u5728 bubble() \u4e2d\uff0c\u6211\u4eec\u7ed9\u6bd4\u8f83\u51fd\u6570\u4f20\u9012\u4e86\u6307\u5411\u6570\u7ec4\u5143\u7d20\u7684\u6307\u9488\u3002\u6700\u540e\uff0c\u5f53\u7136\u6211\u4eec\u5728 compare() \u4e2d\u89e3\u5f15\u7528\u4e86\u8fd9\u4e9b\u6307\u9488\uff0c\u4f7f\u5f97\u6211\u4eec\u53ef\u4ee5\u505a\u6bd4\u8f83\u3002\u4e0b\u4e00\u6b65\u5c31\u662f\u8981\u628a bubble() \u4f20\u7ed9 compare() \u7684\u6307\u9488\u53d8\u6210 void \u6307\u9488\uff0c\u4f7f\u5f97\u8fd9\u4e2a\u51fd\u6570\u53d8\u5f97\u7c7b\u578b\u65e0\u5173\u3002\u8fd9\u5728 bubble_4 \u4e2d\u4f53\u73b0\uff1a /*------------------ bubble_4.c ----------------------------*/ /* Program bubble_4.c from PTRTUT10,HTM 6/13/97 */ #include <stdio.h> int arr[10] = { 3,6,1,2,3,8,4,1,7,2}; void bubble(int *p, int N); int compare(void *m, void *n); int main(void) { int i; putchar('\\n'); for (i = 0; i < 10; i++) { printf(\"%d \", arr[i]); } bubble(arr,10); putchar('\\n'); for (i = 0; i < 10; i++) { printf(\"%d \", arr[i]); } return 0; } void bubble(int *p, int N) { int i, j, t; for (i = N-1; i >= 0; i--) { for (j = 1; j <= i; j++) { if (compare((void *)&p[j-1], (void *)&p[j])) { t = p[j-1]; p[j-1] = p[j]; p[j] = t; } } } } int compare(void *m, void *n) { int *m1, *n1; m1 = (int *)m; n1 = (int *)n; return (*m1 > *n1); } /*------------------ end of bubble_4.c ---------------------*/ \u73b0\u5728\u8981\u6ce8\u610f\uff0c\u8fd9\u6837\u505a\u7684\u65f6\u5019\u6211\u4eec\u5fc5\u987b\u628a compare() \u4e2d\u7684 void \u6307\u9488\u8f6c\u6362\u6210\u5b9e\u9645\u6392\u5e8f\u7684\u7c7b\u578b\u3002\u4f46\u5982\u4f60\u770b\u5230\u7684\uff0c\u8fd9\u6837\u662f\u53ef\u4ee5\u7684\u3002\u65e2\u7136\u6211\u4eec\u4f20\u7ed9 bubble() \u7684\u4ecd\u7136\u662f\u6574\u578b\u6570\u7ec4\u7684\u6307\u9488\u3002\u90a3\u4e48\u5f53\u6211\u4eec\u628a\u5b83\u4eec\u4f5c\u4e3a\u53c2\u6570\u4f20\u7ed9 compare() \u7684\u65f6\u5019\uff0c\u5c31\u5fc5\u987b\u5f3a\u5236\u8f6c\u6362\u4e3a void \u6307\u9488\u3002 \u73b0\u5728\u6211\u4eec\u628a\u95ee\u9898\u5b9a\u4f4d\u5230\u8be5\u4f20\u7ed9 bubble() \u4ec0\u4e48\u3002\u6211\u4eec\u60f3\u628a bubble() \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e5f\u662f void \u6307\u9488\u3002\u4f46\u8fd9\u610f\u5473\u7740\uff0c\u6211\u4eec\u5f97\u6539\u53d8\u53d8\u91cf t \uff0c\u56e0\u4e3a\u5b83\u73b0\u5728\u662f\u6574\u578b\u3002\u53e6\u5916\uff0c\u5728\u4f7f\u7528 t = p[j-1]; \u7684\u5730\u65b9\u6211\u4eec\u9700\u8981\u77e5\u9053 p[j-1] \u7684\u7c7b\u578b\uff0c\u4ee5\u4fbf\u4e8e\u6211\u4eec\u77e5\u9053\u8981\u62f7\u8d1d\u7ed9\u53d8\u91cf t \uff08\u6216\u8005\u662f\u4ee3\u66ff t \u7684\u4e0d\u7ba1\u4ec0\u4e48\u4e1c\u897f\uff09\u591a\u5c11\u5b57\u8282\u3002 \u73b0\u5728\u5728 bubble_4.c \u4e2d\u7684 bubble() \uff0c\u4e00\u4e9b\u4fe1\u606f\uff0c\u5982\u88ab\u5b58\u50a8\u7684\u6570\u636e\u7684\u7c7b\u578b\uff08\u5373\u6bcf\u4e2a\u5143\u7d20\u7684\u5927\u5c0f\uff09\u53ef\u4ee5\u901a\u8fc7\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e00\u4e2a\u6574\u578b\u6307\u9488\u83b7\u53d6\u5230\u3002\u5982\u679c\u6211\u4eec\u60f3\u8ba9 bubble() \u6392\u5e8f\u4efb\u4f55\u7c7b\u578b\u7684\u6570\u636e\uff0c\u6211\u4eec\u5f97\u628a\u8fd9\u4e2a\u6307\u9488\u90fd\u8f6c\u6362\u4e3a void \u6307\u9488\u3002\u4f46\u662f\u8fd9\u6837\u505a\uff0c\u6211\u4eec\u5c31\u4f1a\u628a\u4e0e\u4e4b\u76f8\u5173\u7684\u6570\u7ec4\u5143\u7d20\u7684\u5927\u5c0f\u8fd9\u4e9b\u4fe1\u606f\u4e22\u5931\u6389\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5728 bubble_5.c \u4e2d\u52a0\u5165\u989d\u5916\u7684\u53c2\u6570\u6765\u5904\u7406\u8fd9\u4e00\u4fe1\u606f\u3002 \u76f8\u6bd4\u524d\u9762\u7684\u6539\u8fdb\uff0c\u4ece bubble4.c \u5230 bubble5.c \u7684\u6539\u53d8\u53ef\u80fd\u6bd4\u8f83\u591a\uff0c\u56e0\u6b64\u4ed4\u7ec6\u6bd4\u8f83\u4e00\u4e0b\u8fd9 2 \u4e2a\u6a21\u5757\u7684\u5dee\u5f02\u3002 /*---------------------- bubble5.c ---------------------------*/ /* Program bubble_5.c from PTRTUT10.HTM 6/13/97 */ #include <stdio.h> #include <string.h> long arr[10] = { 3,6,1,2,3,8,4,1,7,2}; void bubble(void *p, size_t width, int N); int compare(void *m, void *n); int main(void) { int i; putchar('\\n'); for (i = 0; i < 10; i++) { printf(\"%d \", arr[i]); } bubble(arr, sizeof(long), 10); putchar('\\n'); for (i = 0; i < 10; i++) { printf(\"%ld \", arr[i]); } return 0; } void bubble(void *p, size_t width, int N) { int i, j; unsigned char buf[4]; unsigned char *bp = p; for (i = N-1; i >= 0; i--) { for (j = 1; j <= i; j++) { if (compare((void *)(bp + width*(j-1)), (void *)(bp + j*width))) /* 1 */ { /* t = p[j-1]; */ memcpy(buf, bp + width*(j-1), width); /* p[j-1] = p[j]; */ memcpy(bp + width*(j-1), bp + j*width , width); /* p[j] = t; */ memcpy(bp + j*width, buf, width); } } } } int compare(void *m, void *n) { long *m1, *n1; m1 = (long *)m; n1 = (long *)n; return (*m1 > *n1); } /*--------------------- end of bubble5.c ---------------------*/ \u6ce8\u610f\u5230\u73b0\u5728\u6211\u4eec\u628a\u6570\u7ec4\u7684\u7c7b\u578b\u4ece int \u6362\u6210\u4e86 long \uff0c\u6765\u5c55\u793a compare() \u9700\u8981\u505a\u51fa\u7684\u6539\u53d8\u3002\u4f46\u5728 bubble() \u4e2d\u6211\u4eec\u53bb\u6389\u4e86\u53d8\u91cf t \uff08\u672c\u5e94\u8be5\u662f\u4ece int \u6362\u6210 long \u7684\uff09\u3002\u6211\u52a0\u4e0a\u4e86\u4e00\u4e0b 4 \u4e2a\u65e0\u7b26\u53f7\u5b57\u7b26\u957f\u7684 buffer\uff0c\u5b83\u53ef\u4ee5\u5b58\u653e\u4e00\u4e2a long\uff08\u8fd9\u4f1a\u5728\u5728\u540e\u9762\u4fee\u6539\uff09\u3002\u65e0\u7b26\u53f7\u5b57\u7b26\u6307\u9488 *bp \u7528\u4e8e\u6307\u5411\u8981\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u57fa\u5740\uff0c\u5c31\u662f\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 \u6211\u4eec\u4e5f\u5fc5\u987b\u4fee\u6539\u4f20\u7ed9 compare() \u7684\u53c2\u6570\u4ee5\u53ca\u4ea4\u6362 2 \u4e2a\u5143\u7d20\u7684\u65b9\u5f0f\u3002\u4f7f\u7528 memcpy() \u548c\u6307\u9488\u7b26\u53f7\u800c\u4e0d\u662f\u6570\u7ec4\u7b26\u53f7\u80fd\u591f\u964d\u4f4e\u7c7b\u578b\u654f\u611f\u3002 \u518d\u5f3a\u8c03\u4e00\u904d\uff0c\u7ec6\u5fc3\u6bd4\u8f83 bubble5.c \u548c bubble4.c \u80fd\u8ba9\u4f60\u66f4\u52a0\u7406\u89e3\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48\u4ee5\u53ca\u4e3a\u4ec0\u4e48\u3002 \u6211\u4eec\u73b0\u5728\u770b\u770b bubble6.c \uff0c\u5b83\u7528\u548c bubble5.c \u4e00\u6837\u7684 bubble() \u51fd\u6570\u6765\u6392\u5e8f\u5b57\u7b26\u4e32\u6570\u7ec4\u3002\u56e0\u4e3a\u5b57\u7b26\u4e32\u7684\u6bd4\u8f83\u548c long int \u7684\u6bd4\u8f83\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u4fee\u6539\u6bd4\u8f83\u51fd\u6570\u3002\u53e6\u5916\uff0c\u6211\u5220\u9664\u4e86 bubble5.c \u91cc\u9762\u7684\u6ce8\u91ca\u3002 /*--------------------- bubble6.c ---------------------*/ /* Program bubble_6.c from PTRTUT10.HTM 6/13/97 */ #include <stdio.h> #include <string.h> #define MAX_BUF 256 char arr2[5][20] = { \"Mickey Mouse\", \"Donald Duck\", \"Minnie Mouse\", \"Goofy\", \"Ted Jensen\" }; void bubble(void *p, int width, int N); int compare(void *m, void *n); int main(void) { int i; putchar('\\n'); for (i = 0; i < 5; i++) { printf(\"%s\\n\", arr2[i]); } bubble(arr2, 20, 5); putchar('\\n\\n'); for (i = 0; i < 5; i++) { printf(\"%s\\n\", arr2[i]); } return 0; } void bubble(void *p, int width, int N) { int i, j, k; unsigned char buf[MAX_BUF]; unsigned char *bp = p; for (i = N-1; i >= 0; i--) { for (j = 1; j <= i; j++) { k = compare((void *)(bp + width*(j-1)), (void *)(bp + j*width)); if (k > 0) { memcpy(buf, bp + width*(j-1), width); memcpy(bp + width*(j-1), bp + j*width , width); memcpy(bp + j*width, buf, width); } } } } int compare(void *m, void *n) { char *m1 = m; char *n1 = n; return (strcmp(m1,n1)); } /*------------------- end of bubble6.c ---------------------*/ bubble() \u51fd\u6570\u6ca1\u6709\u6539\u53d8\u8bf4\u660e\u5b83\u80fd\u591f\u6392\u5e8f\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\u3002\u5269\u4e0b\u8981\u505a\u7684\u5c31\u662f\u4f20\u7ed9 bubble() \u6211\u4eec\u8981\u4f7f\u7528\u7684\u6bd4\u8f83\u51fd\u6570\u7684\u540d\u5b57\uff0c\u4ee5\u4f7f\u5f97 bubble() \u6709\u771f\u6b63\u7684\u901a\u7528\u6027\u3002\u5c31\u50cf\u6570\u7ec4\u7684\u540d\u5b57\u662f\u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\u5728\u6570\u636e\u6bb5\u7684\u5730\u5740\uff0c\u51fd\u6570\u540d\u4e5f\u662f\u8fd9\u4e2a\u51fd\u6570\u5728\u4ee3\u7801\u6bb5\u7684\u5730\u5740\u3002\u56e0\u6b64\u6211\u4eec\u9700\u8981\u7528\u4e00\u4e2a\u51fd\u6570\u6307\u9488\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662f\u6bd4\u8f83\u51fd\u6570\u3002\u51fd\u6570\u6307\u9488\u5fc5\u987b\u8981\u548c\u6240\u6307\u51fd\u6570\u7684\u53c2\u6570\u6570\u91cf\u3001\u53c2\u6570\u7c7b\u578b\u4ee5\u53ca\u8fd4\u56de\u503c\u7c7b\u578b\u5339\u914d\u3002\u8fd9\u91cc\uff0c\u6211\u4eec\u8fd9\u6837\u58f0\u660e\u51fd\u6570\u6307\u9488\uff1a int (*fptr)(const void *p1, const void *p2); \u6ce8\u610f\uff0c\u5982\u679c\u6211\u4eec\u8fd9\u6837\u5199\uff1a int *fptr(const void *p1, const void *p2); \u53ea\u662f\u58f0\u660e\u4e86\u4e00\u4e2a\u51fd\u6570\u539f\u578b\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u6574\u578b\u6307\u9488\u3002\u8fd9\u662f\u56e0\u4e3a\u5728 C \u91cc\u9762 () \u6bd4 * \uff08\u6307\u9488\u7b26\u53f7\uff09\u7684\u4f18\u5148\u7ea7\u9ad8\u3002\u901a\u8fc7\u628a () \u653e\u5728\u5b57\u7b26\u4e32 *fptr \u4e24\u4fa7\uff0c\u8868\u660e\u6211\u4eec\u58f0\u660e\u4e86\u4e00\u4e2a\u51fd\u6570\u6307\u9488\u3002 \u73b0\u5728\u6211\u4eec\u4fee\u6539 bubble() \u7684\u58f0\u660e\uff0c\u7ed9\u5b83\u52a0\u4e0a\u7b2c\u56db\u4e2a\u53c2\u6570--\u5408\u9002\u7c7b\u578b\u7684\u51fd\u6570\u6307\u9488\u3002\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\uff1a void bubble(void *p, int width, int N, int(*fptr)(const void *, const void *)); \u5f53\u6211\u4eec\u8c03\u7528 bubble() \u7684\u65f6\u5019\uff0c\u6211\u4eec\u52a0\u5165\u8981\u7528\u7684\u6bd4\u8f83\u51fd\u6570\u540d\uff0c bubble7.c \u5c55\u793a\u4e86\u600e\u4e48\u7528\u76f8\u540c\u7684 bubble() \u51fd\u6570\u6765\u6392\u5e8f\u4e0d\u540c\u7684\u6570\u636e\u7c7b\u578b\u3002 /*------------------- bubble7.c ------------------*/ /* Program bubble_7.c from PTRTUT10.HTM 6/10/97 */ #include <stdio.h> #include <string.h> #define MAX_BUF 256 long arr[10] = { 3,6,1,2,3,8,4,1,7,2}; char arr2[5][20] = { \"Mickey Mouse\", \"Donald Duck\", \"Minnie Mouse\", \"Goofy\", \"Ted Jensen\" }; void bubble(void *p, int width, int N, int(*fptr)(const void *, const void *)); int compare_string(const void *m, const void *n); int compare_long(const void *m, const void *n); int main(void) { int i; puts(\"\\nBefore Sorting:\\n\"); for (i = 0; i < 10; i++) /* show the long ints */ { printf(\"%ld \",arr[i]); } puts(\"\\n\"); for (i = 0; i < 5; i++) /* show the strings */ { printf(\"%s\\n\", arr2[i]); } bubble(arr, 4, 10, compare_long); /* sort the longs */ bubble(arr2, 20, 5, compare_string); /* sort the strings */ puts(\"\\n\\nAfter Sorting:\\n\"); for (i = 0; i < 10; i++) /* show the sorted longs */ { printf(\"%d \",arr[i]); } puts(\"\\n\"); for (i = 0; i < 5; i++) /* show the sorted strings */ { printf(\"%s\\n\", arr2[i]); } return 0; } void bubble(void *p, int width, int N, int(*fptr)(const void *, const void *)) { int i, j, k; unsigned char buf[MAX_BUF]; unsigned char *bp = p; for (i = N-1; i >= 0; i--) { for (j = 1; j <= i; j++) { k = fptr((void *)(bp + width*(j-1)), (void *)(bp + j*width)); if (k > 0) { memcpy(buf, bp + width*(j-1), width); memcpy(bp + width*(j-1), bp + j*width , width); memcpy(bp + j*width, buf, width); } } } } int compare_string(const void *m, const void *n) { char *m1 = (char *)m; char *n1 = (char *)n; return (strcmp(m1,n1)); } int compare_long(const void *m, const void *n) { long *m1, *n1; m1 = (long *)m; n1 = (long *)n; return (*m1 > *n1); } /*----------------- end of bubble7.c -----------------*/ \"Algorithms in C\" Robert Sedgewick Addison-Wesley ISBN 0-201-51425-7 \u21a9","title":"Chapter10 \u6307\u5411\u51fd\u6570\u7684\u6307\u9488"},{"location":"chapter2/","text":"\u597d\u4e86\uff0c\u6765\u5230\u7b2c\u4e8c\u7ae0\u3002\u8ba9\u6211\u4eec\u8ba8\u8bba\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u5728\u58f0\u660e\u6307\u9488\u53d8\u91cf\u65f6\u8981\u6307\u660e\u6307\u5411\u7684 \u7c7b\u578b \uff0c\u50cf\u4e0b\u9762\u8fd9\u6837\uff1a int *ptr; \u4e00\u4e2a\u7406\u7531\u5c31\u662f\uff0c\u4e00\u65e6 ptr \u201c\u6307\u5411\u201d\u67d0\u7269\uff0c\u5982\u6211\u4eec\u8fd9\u6837\u5199\uff1a *ptr = 2; \u7f16\u8bd1\u5668\u5c31\u77e5\u9053\u8be5\u62f7\u8d1d\u591a\u5c11\u5b57\u8282\u5230 ptr \u6307\u5411\u7684\u5185\u5b58\u5730\u5740\u3002\u5982\u679c ptr \u88ab\u58f0\u660e\u7528\u6765\u6307\u5411\u4e00\u4e2a int\uff0c\u4f1a\u62f7\u8d1d 2 \u5b57\u8282\uff1b\u800c\u6307\u5411 long\uff0c\u5c31\u62f7\u8d1d 4 \u5b57\u8282\u3002\u5bf9\u4e8e float \u548c double \u7c7b\u578b\u662f\u7c7b\u4f3c\u7684\uff0c\u5c06\u62f7\u8d1d\u76f8\u5e94\u5927\u5c0f\u7684\u5b57\u8282\u3002\u6307\u660e\u6307\u9488\u6307\u5411\u53d8\u91cf\u7684\u7c7b\u578b\u8ba9\u7f16\u8bd1\u5668\u6709\u5f88\u591a\u6709\u8da3\u7684\u89e3\u91ca\u4ee3\u7801\u7684\u65b9\u5f0f\u3002\u6bd4\u5982\uff0c10 \u4e2a\u6574\u6570\u5728\u4e00\u884c\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u5728\u5185\u5b58\u91cc\u7ec4\u6210\u4e86\u4e00\u4e2a\u5757\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u4f1a\u7559\u51fa 20 \u5b57\u8282\u7684\u5185\u5b58\u53bb\u653e 10 \u4e2a\u6574\u6570\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u628a ptr \u6307\u5411\u7b2c\u4e00\u4e2a\u6574\u6570\u3002\u5e76\u4e14\u5047\u5b9a\u8fd9\u4e2a\u6574\u6570\u5728\u5185\u5b58\u4e2d\u7684\u4f4d\u7f6e\u662f100\uff0810\u8fdb\u5236\uff09\uff0c\u5982\u679c\u6211\u4eec\u50cf\u4e0b\u9762\u8fd9\u6837\u5199\uff0c\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a ptr + 1; \u56e0\u4e3a\u7f16\u8bd1\u5668\u77e5\u9053 ptr \u662f\u4e00\u4e2a\u6307\u9488\uff08\u5c31\u662f\u8bf4\u5b83\u7684\u503c\u662f\u4e00\u4e2a\u5730\u5740\uff09\u5e76\u4e14\u6307\u5411\u4e00\u4e2a\u6574\u6570\uff08 ptr \u5f53\u524d\u7684\u503c 100 \u5c31\u662f\u8fd9\u4e2a\u6574\u6570\u7684\u5730\u5740\uff09\uff0c\u6240\u4ee5\u5b83\u4f1a\u7ed9 ptr \u52a0\u4e0a 2 \u800c\u4e0d\u662f 1\uff0c\u56e0\u6b64 ptr \u4f1a\u6307\u5411\u4f4d\u4e8e\u5185\u5b58\u4e2d 102 \u7684\u4f4d\u7f6e\u7684 \u4e0b\u4e00\u4e2a\u6574\u6570 \u3002\u540c\u6837\uff0c\u5982\u679c ptr \u6307\u5411 long \u7c7b\u578b\uff0c\u5c31\u4f1a\u52a0\u4e0a 4\u3002\u5176\u4ed6\u6570\u636e\u7c7b\u578b\uff0c\u5982 float\u3001double\uff0c\u751a\u81f3\u662f\u81ea\u5b9a\u4e49\u7684\u7ed3\u6784\u4f53\u4e5f\u662f\u4e00\u6837\u7684\u3002\u5f88\u660e\u663e\u8fd9\u8ddf\u6211\u4eec\u5e73\u65f6\u7684\u52a0\u6cd5\u4e0d\u4e00\u6837\u3002\u5728 C \u8bed\u8a00\u91cc\u9762\u5b83\u6307\u7684\u662f\u201c\u6307\u9488\u8fd0\u7b97\u201d\uff0c\u8fd9\u4e2a\u672f\u8bed\u6211\u4eec\u540e\u9762\u4f1a\u63d0\u5230\u3002 \u53e6\u5916\uff0c\u65e2\u7136 ptr++ \u548c ++ptr \u90fd\u76f8\u5f53\u4e8e ptr+1 \uff08\u867d\u7136\u52a0\u7684\u65f6\u95f4\u70b9\u4f1a\u6709\u4e00\u70b9\u5dee\u5f02\uff09\uff0c\u90a3\u4e48\u6307\u9488\u7528\u4e00\u5143\u8fd0\u7b97\u7b26 ++ \u7684\u65f6\u5019 -- \u65e0\u8bba\u662f\u524d\u7f6e\u8fd8\u662f\u540e\u7f6e\u7684 -- ptr \u91cc\u9762\u7684\u5730\u5740\u90fd\u4f1a\u589e\u52a0 sizeof(type) \uff0c\u8fd9\u91cc\u7684 type \u662f ptr \u6307\u5411\u7684\u5bf9\u8c61\u7684\u7c7b\u578b\uff08\u5982 sizeof(int) \u662f 2\uff0c sizeof(long) \u662f 4 \u7b49\uff09\u3002 \u6839\u636e\u5b9a\u4e49\uff0c\u4e00\u5757 10 \u4e2a\u6574\u6570\u8fde\u7eed\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u5c31\u662f\u4e00\u4e2a\u6574\u578b\u6570\u7ec4\uff0c\u8fd9\u6837\u5c31\u5f15\u5165\u4e86\u6570\u7ec4\u548c\u6307\u9488\u4e4b\u95f4\u7684\u6709\u8da3\u5173\u7cfb\u3002 \u770b\u770b\u4e0b\u9762\u8fd9\u4e2a\u8bed\u53e5\uff1a int my_array[] = {1,23,17,4,-5,100}; \u8fd9\u91cc\u662f\u4e00\u4e2a\u5305\u542b 6 \u4e2a\u6574\u6570\u7684\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 my_array \u7684\u4e0b\u6807\u6765\u5f15\u7528\u8fd9\u4e9b\u6574\u6570\uff0c\u5982 my_array[0] \u548c my_array[5] \u3002\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6307\u9488\u5f15\u7528\uff1a int *ptr; ptr = &my_array[0]; /* point our pointer at the first integer in our array */ \u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6253\u5370\u6570\u7ec4\uff0c\u6570\u7ec4\u7d22\u5f15\u548c\u6307\u9488\u7684\u65b9\u5f0f\u90fd\u53ef\u4ee5\u3002\u4e0b\u9762\u7684\u4ee3\u7801\u80fd\u8bf4\u660e\u8fd9\u4e00\u70b9\uff1a ----------- Program 2.1 ----------------------------------- /* Program 2.1 from PTRTUT10.HTM 6/13/97 */ #include <stdio.h> int my_array[] = {1,23,17,4,-5,100}; int *ptr; int main(void) { int i; ptr = &my_array[0]; /* point our pointer to the first element of the array */ printf(\"\\n\\n\"); for (i = 0; i < 6; i++) { printf(\"my_array[%d] = %d \",i,my_array[i]); /*<-- A */ printf(\"ptr + %d = %d\\n\",i, *(ptr + i)); /*<-- B */ } return 0; } \u7f16\u8bd1\u8fd0\u884c\u4e0a\u9762\u7684\u4ee3\u7801\uff0c\u7ec6\u5fc3\u7684\u8bdd\u4f60\u4f1a\u6ce8\u610f\u5230\uff0c\u884cA\u548c\u884cB\u4f1a\u6253\u5370\u76f8\u540c\u7684\u503c\u3002\u53e6\u5916\u89c2\u5bdf\u4e00\u4e0b\u884cB\u91cc\u6211\u4eec\u9006\u5f15\u7528\u6307\u9488\u7684\u65b9\u5f0f\uff1a\u5148\u628a ptr \u52a0\u4e0a i \uff0c\u7136\u540e\u624d\u9006\u5f15\u7528\u3002\u628a\u884cB\u6539\u6210\u4e0b\u9762\u8fd9\u884c\uff1a printf(\"ptr + %d = %d\\n\",i, *ptr++); \u8fd0\u884c\u8bd5\u8bd5\u3002\u518d\u6539\u6210\u8fd9\u884c\uff1a printf(\"ptr + %d = %d\\n\",i, *(++ptr)); \u8fd0\u884c\u8bd5\u8bd5\u3002\u6bcf\u6b21\u6d4b\u8bd5\u5148\u731c\u4e00\u4e0b\u8f93\u51fa\uff0c\u518d\u4ed4\u7ec6\u770b\u770b\u5b9e\u9645\u7684\u8f93\u51fa\u3002 \u5728 C \u91cc\u9762\uff0c\u6807\u51c6\u89c4\u5b9a\u4f7f\u7528 &var_name[0] \u7684\u5730\u65b9\u53ef\u4ee5\u6362\u6210 var_name \uff0c\u56e0\u6b64\uff0c\u521a\u624d\u7684\u8fd9\u884c\u4ee3\u7801\uff1a ptr = &my_array[0]; \u53ef\u4ee5\u6362\u6210\uff1a ptr = my_array; \u80fd\u591f\u5f97\u5230\u540c\u6837\u7684\u7ed3\u679c\u3002 \u4f46\u8fd9\u6837\u8ba9\u5f88\u591a\u4eba\u8ba4\u4e3a\u6570\u7ec4\u7684\u540d\u5b57\u662f\u4e00\u4e2a\u6307\u9488\u3002\u6211\u5fc3\u91cc\u66f4\u613f\u610f\u8ba4\u4e3a\u201c\u6570\u7ec4\u7684\u540d\u5b57\u662f\u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\u201d\u3002\u5f88\u591a\u521d\u5b66\u8005\uff08\u5305\u62ec\u6211\u521a\u5f00\u59cb\u5b66\u7684\u65f6\u5019\uff09\u8ba4\u4e3a\u5b83\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u5c31\u4f1a\u611f\u5230\u5f88\u56f0\u60d1\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a ptr = my_array; \u4f46\u4e0d\u80fd\u4e0b\u9762\u8fd9\u6837\uff1a my_array = ptr; \u539f\u56e0\u662f ptr \u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u800c my_array \u662f\u4e00\u4e2a\u5e38\u91cf\u3002\u4e5f\u5c31\u662f\uff0c\u4e00\u65e6 my_array[] \u88ab\u58f0\u660e\uff0c\u5b83\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u5c31\u4e0d\u80fd\u88ab\u6539\u53d8\u4e86\u3002 \u65e9\u4e9b\u5728\u6211\u4eec\u8ba8\u8bba\u5de6\u503c\u7684\u65f6\u5019\uff0c\u6211\u5f15\u7528\u4e86 K&R-2 \u7684\u8bdd\uff1a \" \u5bf9\u8c61 \u662f\u547d\u540d\u4e86\u7684\u50a8\u5b58\u533a\u57df\uff0c\u800c \u5de6\u503c \u5c31\u662f\u5f15\u7528\u4e86\u4e00\u4e2a\u5bf9\u8c61\u7684\u8868\u8fbe\u5f0f\u3002\" \u8fd9\u5f15\u51fa\u4e86\u4e00\u4e2a\u6709\u8da3\u7684\u95ee\u9898\u3002\u65e2\u7136 my_array \u662f\u4e00\u4e2a\u547d\u540d\u4e86\u7684\u5b58\u50a8\u533a\u57df\uff0c\u90a3\u4e3a\u4ec0\u4e48\u4e0a\u9762\u90a3\u4e2a\u8d4b\u503c\u8bed\u53e5\u4e2d\u7684 my_array \u4e0d\u662f\u4e00\u4e2a\u5de6\u503c\u5462\uff1f\u4e3a\u4e86\u89e3\u91ca\u8fd9\u4e2a\u95ee\u9898\uff0c\u4e00\u4e9b\u4eba\u5c31\u628a my_array \u5f53\u4f5c\u201c\u4e0d\u80fd\u6539\u53d8\u7684\u5de6\u503c\u201d\u3002 \u628a\u793a\u4f8b\u7a0b\u5e8f\u4e2d\u7684\uff1a ptr = &my_array[0]; \u6539\u6210\uff1a ptr = my_array; \u518d\u6b21\u8fd0\u884c\uff0c\u9a8c\u8bc1\u4e00\u4e0b\u7ed3\u679c\u662f\u4e0d\u662f\u5b8c\u5168\u4e00\u6837\u7684\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6df1\u6316\u4e00\u4e0b\u4e0a\u9762\u7528\u5230\u7684 2 \u4e2a\u540d\u5b57 ptr \u548c my_array \u4e4b\u95f4\u7684\u4e0d\u540c\u3002\u4e00\u4e9b\u4eba\u8ba4\u4e3a\u6570\u7ec4\u540d\u5c31\u662f\u4e00\u4e2a \u5e38\u91cf \u6307\u9488\u3002\u6211\u4eec\u8be5\u600e\u4e48\u7406\u89e3\u5462\uff1f\u4e3a\u4e86\u7406\u89e3\u8fd9\u4e2a\u6982\u5ff5\u4e2d\u7684\u672f\u8bed\u201c\u5e38\u91cf\u201d\uff0c\u4e0d\u59a8\u8ba9\u6211\u4eec\u56de\u8fc7\u5934\u770b\u770b\u201c\u53d8\u91cf\u201d\u7684\u5b9a\u4e49\u3002\u5f53\u6211\u4eec\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\u7684\u65f6\u5019\uff0c\u4f1a\u5728\u5185\u5b58\u4e2d\u7559\u51fa\u4e00\u4e2a\u4f4d\u7f6e\u5b58\u653e\u76f8\u5e94\u7c7b\u578b\u7684\u503c\u3002\u8fd9\u4e9b\u505a\u5b8c\u540e\uff0c\u53d8\u91cf\u7684\u540d\u5b57\u53ef\u4ee5\u6709 2 \u79cd\u89e3\u91ca\u3002\u5f53\u7528\u5728\u8d4b\u503c\u64cd\u4f5c\u7b26\u5de6\u8fb9\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u628a\u5b83\u5f53\u4f5c\u5185\u5b58\u5730\u5740\uff0c\u5c06\u8d4b\u503c\u64cd\u4f5c\u7b26\u53f3\u8fb9\u7684\u8ba1\u7b97\u7ed3\u679c\u62f7\u8d1d\u5230\u8fd9\u4e2a\u5730\u5740\u3002\u4f46\u5f53\u6211\u4eec\u7528\u5728\u53f3\u8fb9\u65f6\uff0c\u8fd9\u4e2a\u540d\u5b57\u5c31\u4f1a\u88ab\u89e3\u91ca\u6210\u5b58\u50a8\u5728\u8be5\u53d8\u91cf\u6240\u5728\u5185\u5b58\u5730\u5740\u91cc\u9762\u7684\u5185\u5bb9\u3002 \u60f3\u5230\u8fd9\u4e9b\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u4e00\u79cd\u6700\u7b80\u5355\u7684\u5e38\u91cf\uff1a int i, k; i = 2; \u8fd9\u91cc\u7684 i \u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u4f1a\u5728\u5185\u5b58\u4e2d\u7684\u6570\u636e\u6bb5\u5360\u6709\u4e00\u6bb5\u7a7a\u95f4\u30022 \u662f\u4e00\u4e2a\u5e38\u91cf\uff0c \u5c31\u672c\u8eab\u800c\u8bba\uff0c\u4e0d\u4f1a\u5728\u6570\u636e\u6bb5\u7559\u51fa\u5185\u5b58\u7a7a\u95f4\uff0c\u800c\u662f\u76f4\u63a5\u653e\u5728\uff08\u5d4c\u5165\uff09\u4ee3\u7801\u6bb5\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u5f53\u6211\u4eec\u5199\u4e86\u7c7b\u4f3c k = i; \u7684\u8bed\u53e5\u65f6\uff0c\u7f16\u8bd1\u5668\u5c31\u4f1a\u521b\u5efa\u4ee3\u7801\uff0c\u5728\u8fd0\u884c\u65f6\u67e5\u770b\u5185\u5b58\u5730\u5740 &i \u5904\uff0c\u7b97\u51fa\u503c\u5e76\u62f7\u8d1d\u7ed9 k \uff1b\u800c i = 2; \u8fd9\u6837\u7684\u8bed\u53e5\uff0c\u7f16\u8bd1\u5668\u4f1a\u7b80\u5355\u5730\u628a\u4ee3\u7801\u4e2d\u7684 2 \u7ed9 i\uff0c\u4e0d\u4f1a\u5f15\u7528\u6570\u636e\u6bb5\u7684\u3002\u6362\u8a00\u4e4b\uff0c k \u548c i \u90fd\u662f\u5bf9\u8c61\uff0c\u800c 2 \u4e0d\u662f\u3002 \u7c7b\u4f3c\u7684\uff0c\u5728\u524d\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u56e0\u4e3a my_array \u662f\u5e38\u91cf\uff0c\u90a3\u4e48\u4e00\u65e6\u7f16\u8bd1\u5668\u5efa\u7acb\u597d\u6570\u7ec4\u81ea\u5df1\u5b58\u50a8\u7684\u4f4d\u7f6e\uff0c\u5b83\u5c31\u201c\u77e5\u9053\u201d\u4e86 my_array[0] \u7684\u5730\u5740\u3002\u4e00\u770b\u5230\uff1a ptr = my_array; \u7f16\u8bd1\u5668\u4f1a\u7b80\u5355\u5730\u628a\u8fd9\u4e2a\u5730\u5740\u5f53\u4f5c\u662f\u4ee3\u7801\u6bb5\u4e2d\u7684\u5e38\u91cf\uff0c\u5373\u4e0d\u4f1a\u5f15\u7528\u6570\u636e\u6bb5\u3002 \u8fd9\u91cc\u5e94\u8be5\u5f88\u597d\u89e3\u91ca\u4e86 Chapter 1 \u4e2d Program 1.1 \u4f7f\u7528\u7684 (void *) \u8868\u8fbe\u5f0f\uff08\u8bd1\u6ce8\uff1a\u5c06\u5730\u5740\u5f3a\u5236\u8f6c\u6362\u6210\u6307\u9488\uff09\u3002\u5982\u6211\u4eec\u6240\u770b\u5230\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u6709\u5404\u79cd\u7c7b\u578b\u7684\u6307\u9488\u3002\u8fc4\u4eca\u4e3a\u6b62\uff0c\u6211\u4eec\u8ba8\u8bba\u4e86\u6574\u578b\u6307\u9488\u548c\u5b57\u7b26\u578b\u6307\u9488\u3002\u672a\u6765\u7684\u7ae0\u8282\uff0c\u6211\u4eec\u4f1a\u5b66\u4e60\u5230\u7ed3\u6784\u4f53\u6307\u9488\u548c\u6307\u9488\u7684\u6307\u9488\u3002 \u524d\u8fb9\u6211\u4eec\u63d0\u5230\uff0c\u5728\u4e0d\u540c\u7684\u7cfb\u7edf\u4e0a\u6307\u9488\u7684\u5927\u5c0f\u662f\u4e0d\u4e00\u6837\u7684\u3002\u540c\u6837\uff0c\u8fd9\u4e5f\u8bf4\u660e\u6307\u9488\u7684\u5927\u5c0f\u53ef\u4ee5\u6839\u636e\u5b83\u6307\u5411\u5bf9\u8c61\u7684\u7c7b\u578b\u6539\u53d8\u3002\u56e0\u6b64\uff0c\u50cf\u6574\u578b\u90a3\u6837\uff0c\u628a long \u8d4b\u7ed9\u4e00\u4e2a short \u4f1a\u9047\u5230\u9ebb\u70e6\uff1b\u540c\u6837\uff0c\u628a\u4e0d\u540c\u7c7b\u578b\u7684\u6307\u9488\u7684\u503c\u8d4b\u7ed9\u5176\u4ed6\u7c7b\u578b\u7684\u6307\u9488\u4e5f\u4f1a\u9047\u5230\u9ebb\u70e6\u3002 \u4e3a\u4e86\u7b80\u5316\u8fd9\u4e2a\u95ee\u9898\uff0cC \u63d0\u4f9b\u4e86\u4e00\u4e2a void \u7c7b\u578b\u7684\u6307\u9488\u3002\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u58f0\u660e\uff1a void *vptr; void \u6307\u9488\u7b97\u662f\u4e00\u79cd\u6cdb\u578b\u6307\u9488\u3002\u4f8b\u5982\uff0cC \u4e0d\u5141\u8bb8\u6574\u578b\u6307\u9488\u548c\u5b57\u7b26\u578b\u6307\u9488\u8fdb\u884c\u6bd4\u8f83\uff0c\u4f46\u4ed6\u4eec\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u90fd\u53ef\u4ee5\u548c void \u6307\u9488\u6bd4\u8f83\u3002\u5f53\u7136\uff0c\u5176\u4ed6\u7c7b\u578b\u4e5f\u662f\u5982\u6b64\uff0c\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u53ef\u4ee5\u5728\u5408\u9002\u60c5\u51b5\u4e0b\u4ece\u4e00\u79cd\u7c7b\u578b\u7684\u6307\u9488\u8f6c\u6362\u6210\u5176\u4ed6\u7c7b\u578b\u3002\u5728 Chapter 1 \u7684 Program 1.1 \u91cc\uff0c\u6211\u5c31\u5c06 int \u6307\u9488\u8f6c\u6362\u6210 void \u6307\u9488\uff0c\u4ee5\u4f7f\u4ed6\u4eec\u548c %p \u76f8\u5339\u914d\u3002\u5728\u968f\u540e\u7684\u7ae0\u8282\u6211\u4eec\u4f1a\u8c08\u5230\u5176\u4ed6\u5f3a\u5236\u8f6c\u6362\u7684\u539f\u56e0\u3002 \u597d\u4e86\uff0c\u5df2\u7ecf\u6709\u4e0d\u5c11\u6280\u672f\u6027\u7684\u4e1c\u897f\u8981\u53bb\u7406\u89e3\u5438\u6536\u3002\u6211\u4e0d\u671f\u671b\u4e00\u4e2a\u521d\u5b66\u8005\u80fd\u591f\u5728\u7b2c\u4e00\u6b21\u5ea6\u7684\u65f6\u5019\u5c31\u5b8c\u5168\u638c\u63e1\u3002\u968f\u7740\u65f6\u95f4\u548c\u7ecf\u9a8c\u7684\u589e\u52a0\uff0c\u4f60\u53ef\u80fd\u4f1a\u8981\u56de\u8fc7\u5934\u6765\u518d\u8bfb\u4e00\u4e0b\u524d 2 \u7ae0\u3002\u4f46\u662f\u73b0\u5728\uff0c\u5c31\u8ba9\u6211\u4eec\u53bb\u770b\u770b\u6307\u9488\u3001\u5b57\u7b26\u6570\u7ec4\u4ee5\u53ca\u5b57\u7b26\u4e32\u4e4b\u95f4\u7684\u5173\u7cfb\u5427\u3002","title":"Chapter2 \u6307\u9488\u7c7b\u578b\u4e0e\u6570\u7ec4"},{"location":"chapter3/","text":"\u5b57\u7b26\u4e32\u7684\u5b66\u4e60\u80fd\u591f\u8ba9\u6211\u4eec\u6df1\u5165\u878d\u5408\u6307\u9488\u548c\u6570\u7ec4\u7684\u5173\u7cfb\u3002\u4e5f\u66f4\u52a0\u5bb9\u6613\u8bf4\u660e\u4e00\u4e9b\u6807\u51c6 C \u5b57\u7b26\u4e32\u51fd\u6570\u5982\u4f55\u6267\u884c\u3002\u6700\u540e\uff0c\u5b83\u80fd\u8bf4\u660e\u4ec0\u4e48\u65f6\u5019\u6211\u4eec\u80fd\u591f\u548c\u5e94\u8be5\u7ed9\u51fd\u6570\u4f20\u9012\u6307\u9488\u3002 \u5728 C \u91cc\u9762\uff0c\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u5b57\u7b26\u8f93\u51fa\u3002\u5728\u5176\u4ed6\u8bed\u8a00\u91cc\u9762\u4e0d\u4e00\u5b9a\u662f\u8fd9\u6837\u3002\u5728 BASIC\u3001Pascal\u3001Fortran \u4ee5\u53ca\u5176\u4ed6\u4e00\u4e9b\u8bed\u8a00\u91cc\u9762\uff0c\u5b57\u7b26\u4e32\u662f\u4e00\u79cd\u5355\u72ec\u7684\u6570\u636e\u7c7b\u578b\u3002\u4f46\u5728 C \u4e2d\uff0c\u5b57\u7b26\u4e32\u5c31\u662f\u4e00\u4e2a\u4ee5 zero \u5b57\u7b26\uff08\u5199\u4f5c '\\0' \uff09\u7ed3\u5c3e\u7684\u5b57\u7b26\u6570\u7ec4\u3002\u4e3a\u4e86\u5f00\u59cb\u6211\u4eec\u7684\u8ba8\u8bba\uff0c\u6211\u4eec\u4f1a\u5148\u5199\u4e00\u4e9b\u4ee3\u7801\uff0c\u8fd9\u4e9b\u4ee3\u7801\u53ea\u4e3a\u4e86\u8bf4\u660e\u95ee\u9898\uff0c\u5b9e\u9645\u4e2d\u53ef\u80fd\u4e0d\u4f1a\u7528\u5230\u3002\u770b\u770b\u8fd9\u6bb5\u4ee3\u7801\uff1a char my_string[40]; my_string[0] = 'T'; my_string[1] = 'e'; my_string[2] = 'd': my_string[3] = '\\0'; \u867d\u7136\u4e0d\u4f1a\u6709\u4eba\u8fd9\u6837\u5efa\u7acb\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u4f46\u4e00\u4e2a\u4ee5 nul\u5b57\u7b26\u7ed3\u5c3e \u7684\u5b57\u7b26\u6570\u7ec4\u6700\u7ec8\u7ed3\u679c\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u56e0\u4e3a\u6839\u636e\u5b9a\u4e49\uff0c\u4ee5 nul\u5b57\u7b26\u7ed3\u5c3e \u7684\u5b57\u7b26\u6570\u7ec4\u5c31\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\u6ce8\u610f\u8fd9\u91cc nul \uff0c\u548c NULL \u5e76\u4e0d\u4e00\u6837\u3002 nul \u6307\u7684\u662f\u8f6c\u4e49\u7684 0\uff08 '\\0' \uff09\uff0c\u6240\u4ee5\u5b83\u8981\u5360\u7528\u4e00\u4e2a\u5b57\u8282\u7684\u5185\u5b58\u3002\u800c NULL \uff0c\u7528\u4e8e\u521d\u59cb\u5316 null \u6307\u9488\u7684\u5b8f\u5b9a\u4e49\u3002 NULL \u5728\u4f60\u7528\u7684 C \u7f16\u8bd1\u5668\u7684\u67d0\u4e2a\u5934\u6587\u4ef6\u4e2d\u4ee5 #define \u7684\u65b9\u5f0f\u5b9a\u4e49\uff0c\u800c nul \u53ef\u80fd\u6ca1\u6709\u3002 \u65e2\u7136\u4e0a\u9762\u8fd9\u79cd\u5199\u6cd5\u5f88\u6d6a\u8d39\u65f6\u95f4\uff0cC \u8bed\u8a00\u4e5f\u5141\u8bb8\u4e0b\u9762\u8fd9 2 \u79cd\u5199\u6cd5\u3002\u7b2c\u4e00\u4e2a\uff0c\u8fd9\u6837\u5199\uff1a char my_string[40] = {'T', 'e', 'd', '\\0',}; \u4f46\u8fd9\u4f3c\u4e4e\u8fd8\u662f\u591a\u6572\u8fd9\u4e48\u591a\u5b57\u7b26\uff0c\u4e0d\u592a\u65b9\u4fbf\u3002\u6240\u4ee5\uff0cC \u4e5f\u5141\u8bb8\u8fd9\u79cd\u5199\u6cd5\uff1a char my_string[40] = \"Ted\"; \u5f53\u6211\u4eec\u4f7f\u7528\u53cc\u5f15\u53f7\uff0c\u800c\u4e0d\u662f\u5355\u5f15\u53f7\uff0c\u50cf\u4e0a\u9762\u8fd9\u4e2a\u4f8b\u5b50\u4e00\u6837\uff0cnul \u5b57\u7b26\uff08 '\\0' \uff09\u4f1a\u88ab\u81ea\u52a8\u52a0\u5728\u5b57\u7b26\u4e32\u5c3e\u3002 \u5728\u4e0a\u9762 3 \u4e2a\u4f8b\u5b50\u4e2d\uff0c\u7ed3\u679c\u90fd\u662f\u4e00\u6837\u7684\u3002\u7f16\u8bd1\u5668\u4f1a\u7559\u51fa 40 \u5b57\u8282\u7684\u7a7a\u95f4\u53bb\u5b58\u653e\u5b57\u7b26\uff0c\u5e76\u5c06\u524d 4 \u5b57\u8282\u521d\u59cb\u5316\u4e3a Ted\\0 \u3002 \u770b\u770b\u4e0b\u9762\u8fd9\u6bb5\u7a0b\u5e8f\uff1a ------------------program 3.1------------------------------------- /* Program 3.1 from PTRTUT10.HTM 6/13/97 */ #include <stdio.h> char strA[80] = \"A string to be used for demonstration purposes\"; char strB[80]; int main(void) { char *pA; /* a pointer to type character */ char *pB; /* another pointer to type character */ puts(strA); /* show string A */ pA = strA; /* point pA at string A */ puts(pA); /* show what pA is pointing to */ pB = strB; /* point pB at string B */ putchar('\\n'); /* move down one line on the screen */ while(*pA != '\\0') /* line A (see text) */ { *pB++ = *pA++; /* line B (see text) */ } *pB = '\\0'; /* line C (see text) */ puts(strB); /* show strB on screen */ return 0; } --------- end program 3.1 ------------------------------------- \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4e00\u5f00\u59cb\u5b9a\u4e49\u4e86 2 \u4e2a 80 \u5b57\u7b26\u957f\u7684\u5b57\u7b26\u6570\u7ec4\u3002\u56e0\u4e3a\u662f\u5168\u5c40\u53d8\u91cf\uff0c\u5b83\u4eec\u4f1a\u5148\u88ab\u521d\u59cb\u5316\u4e3a '\\0' \uff0c\u7136\u540e strA \u7684\u524d 42 \u5b57\u8282\u88ab\u521d\u59cb\u5316\u4e3a\u5f15\u53f7\u91cc\u9762\u7684\u5b57\u7b26\u4e32\u3002 \u73b0\u5728\u770b\u770b\u4ee3\u7801\uff0c\u6211\u4eec\u58f0\u660e\u4e86 2 \u4e2a\u5b57\u7b26\u6307\u9488\uff0c\u5e76\u628a\u5b57\u7b26\u4e32\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\u3002\u7136\u540e\u7528 pA \u201c\u6307\u5411\u201d\u4e86 strA \u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u901a\u8fc7\u8d4b\u503c\u8fd0\u7b97\u7b26\u628a strA[0] \u7684\u5730\u5740\u7ed9\u4e86\u53d8\u91cf pA \u3002\u7136\u540e\u7528 puts() \u51fd\u6570\u628a pA \u6307\u5411\u7684\u5185\u5bb9\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\u3002\u8fd9\u91cc\u770b\u770b\u51fd\u6570 puts() \u7684\u539f\u578b\uff1a int puts(const char *s); \u6682\u65f6\u5ffd\u7565\u8fd9\u4e2a const \uff0c\u53d1\u73b0\u4f20\u7ed9 puts() \u7684\u53c2\u6570\u662f\u4e00\u4e2a\u6307\u9488\uff0c\u4e5f\u5c31\u662f\u6307\u9488\u7684\u503c\uff08\u56e0\u4e3a C \u8bed\u8a00\u7684\u53c2\u6570\u662f\u4f20\u503c\u7684\uff09\uff0c\u5e76\u4e14\u6307\u9488\u7684\u503c\u5c31\u662f\u5b83\u6240\u6307\u5411\u7684\u5730\u5740\uff0c\u6216\u8005\u7b80\u5355\u7684\u8bf4\u5c31\u662f\u4e00\u4e2a\u5730\u5740\u3002\u56e0\u6b64\uff0c\u5f53\u6211\u4eec\u5199 puts(strA); \u65f6\uff0c\u5982\u6211\u4eec\u6240\u89c1\uff0c\u6211\u4eec\u628a strA[0] \u7684\u5730\u5740\u4f20\u9012\u4e86\u8fc7\u53bb\u3002 \u540c\u6837\uff0c\u5982\u679c\u6211\u4eec\u5199\u4e86 puts(pA); \uff0c\u4f1a\u4f20\u9012\u8fc7\u53bb\u76f8\u540c\u7684\u5730\u5740\uff0c\u56e0\u4e3a\u6211\u4eec\u524d\u9762\u6709\u8fd9\u53e5\u8bdd\uff1a pA = strA; \u3002 \u8fd9\u6837\uff0c\u4e00\u76f4\u5230 line A \u5904\u7684 while() \u8bed\u53e5\u3002line A \u5904\u8868\u793a\uff1a\u53ea\u8981 pA \u6307\u5411\u7684\u5b57\u7b26\uff08\u5373 *pA \uff09\u4e0d\u662f nul \u5b57\u7b26\uff08\u5373\u7ec8\u6b62\u7b26 '\\0' \uff09\uff0c\u5c31\uff1a \u628a pA \u6307\u5411\u7684\u5b57\u7b26\u62f7\u8d1d\u5230 pB \u6307\u5411\u7684\u7a7a\u95f4\uff0c\u5e76\u81ea\u589e pA \u4f7f\u5176\u6307\u5411\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u81ea\u589e pB \u6307\u5411\u4e0b\u4e00\u4e2a\u7a7a\u95f4\u3002 \u5f53\u6211\u4eec\u62f7\u8d1d\u5b8c\u6700\u540e\u4e00\u4e2a\u5b57\u7b26\u7684\u65f6\u5019\uff0c pA \u6307\u5411 nul \u5b57\u7b26\uff0c\u5faa\u73af\u5c31\u4f1a\u7ed3\u675f\u3002\u7136\u800c\u6211\u4eec\u6ca1\u6709\u62f7\u8d1d '\\0' \u3002\u4f46\u662f\u6839\u636e\u5b9a\u4e49\u5b57\u7b26\u4e32 \u5fc5\u987b \u4ee5 nul \u5b57\u7b26\u7ed3\u5c3e\uff0c\u6240\u4ee5\u5728 line C \u5904\u6211\u4eec\u624b\u52a8\u52a0\u4e0a\u4e86 '\\0' \u3002 \u5982\u679c\u80fd\u7528\u5355\u6b65\u8c03\u8bd5\u8fd0\u884c\u8fd9\u6bb5\u7a0b\u5e8f\uff0c\u5e76\u89c2\u5bdf strA \uff0c strB \uff0c pA \u4ee5\u53ca pB \uff0c\u90a3\u5c06\u5341\u5206\u6709\u6559\u80b2\u6027\u3002\u5982\u679c\u80fd\u5728\u5b9a\u4e49 strB[] \u7684\u65f6\u5019\u5982\u4e0b\u521d\u59cb\u5316\u5c31\u66f4\u597d\u4e86\uff1a strB[80] = \"12345678901234567890123456789012345678901234567890\" \u8fd9\u91cc\u6570\u5b57\u7684\u6570\u91cf\u8981\u6bd4 strA \u7684\u957f\u5ea6\u957f\u4e00\u4e9b\u3002\u91cd\u590d\u5355\u6b65\u8c03\u8bd5\u7684\u6b65\u9aa4\u5e76\u89c2\u5bdf\u90a3\u51e0\u4e2a\u53d8\u91cf\u3002\u8bd5\u8bd5\u5427\u3002 \u56de\u5934\u8bf4\u8bf4 puts() \u7684\u539f\u578b\uff0c\u8fd9\u4e2a const \u88ab\u7528\u4f5c\u53c2\u6570\u4fee\u9970\uff0c\u544a\u8bc9\u7528\u6237\u8fd9\u4e2a\u51fd\u6570\u662f\u4e0d\u4f1a\u4fee\u6539\u8be5\u6307\u9488\u6307\u5411\u7684\u5b57\u7b26\u4e32\uff0c\u4e5f\u5c31\u662f\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5f53\u4f5c\u5e38\u91cf\u3002 \u5f53\u7136\uff0c\u4e0a\u9762\u7684\u4ee3\u7801\u53ea\u662f\u5c55\u793a\u4e86\u4e00\u79cd\u62f7\u8d1d\u5b57\u7b26\u4e32\u7684\u7b80\u5355\u65b9\u6cd5\u3002\u628a\u73a9\u4e00\u4e0b\u8fd9\u6bb5\u4ee3\u7801\uff0c\u5230\u4f60\u80fd\u5bf9\u5b83\u53d1\u751f\u4e86\u4ec0\u4e48\u6709\u4e00\u4e2a\u597d\u7684\u7406\u89e3\u4e4b\u540e\uff0c\u6211\u4eec\u5c31\u80fd\u591f\u521b\u5efa\u81ea\u5df1\u7684 strcpy() \u51fd\u6570\u4e86\u3002\u5b83\u5927\u6982\u5c31\u662f\u8fd9\u4e2a\u6837\u5b50\uff1a char *my_strcpy(char *destination, char *source) { char *p = destination; while (*source != '\\0') { *p++ = *source++; } *p = '\\0'; return destination; } \u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u6211\u9075\u4ece\u6807\u51c6\u7a0b\u5e8f\u4e2d\u8fd4\u56de\u4e00\u4e2a\u6307\u9488\u7684\u60ef\u4f8b\u3002 \u91cd\u7533\u4e00\u904d\uff0c\u8fd9\u4e2a\u51fd\u6570\u88ab\u8bbe\u8ba1\u6210\u63a5\u6536 2 \u4e2a\u5b57\u7b26\u6307\u9488\u7684\u503c\uff0c\u4e5f\u5c31\u662f\u5730\u5740\uff0c\u56e0\u6b64\u524d\u9762\u7684\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a int main(void) { my_strcpy(strB, strA); puts(strB); } \u5176\u5b9e\u5728\u4e0a\u9762\u7684 my_strcpy() \u51fd\u6570\u4e2d\uff0c\u6211\u7a0d\u7a0d\u504f\u79bb\u4e86\u6807\u51c6 C \u7684\u683c\u5f0f\uff0c\u5b83\u4e8b\u5b9e\u4e0a\u7684\u539f\u578b\u5e94\u8be5\u662f\u8fd9\u6837\uff1a char *my_strcpy(char *destination, const char *source); \u8fd9\u91cc\u7684 const \u4fee\u9970\u786e\u4fdd\u8fd9\u4e2a\u51fd\u6570\u4e0d\u4f1a\u4fee\u6539 source \u6307\u9488\u6307\u5411\u7684\u5185\u5bb9\u3002\u4f60\u53ef\u4ee5\u50cf\u4e0a\u9762\u90a3\u6837\u52a0\u4e0a const \u4fee\u9970\u8bc1\u5b9e\u4e00\u4e0b\u3002\u7136\u540e\u5728\u51fd\u6570\u91cc\u9762\uff0c\u4f60\u53ef\u4ee5\u589e\u52a0\u4e00\u4e2a\u5c1d\u8bd5\u4fee\u6539 source \u6307\u9488\u6240\u6307\u5185\u5bb9\u7684\u8bed\u53e5\uff0c\u50cf\u8fd9\u6837\uff1a *source = 'X'; \u8fd9\u53e5\u8bdd\u662f\u628a\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u6539\u4e3a X \uff0c\u56e0\u4e3a const \u7684\u539f\u56e0\uff0c\u4f60\u7684\u7f16\u8bd1\u5668\u4f1a\u6355\u6349\u5230\u8fd9\u4e2a\u9519\u8bef\u3002\u8bd5\u8bd5\u770b\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u770b\u770b\u4e0a\u9762\u793a\u4f8b\u4e2d\u7684\u4e00\u4e9b\u95ee\u9898\u3002\u9996\u5148\uff0c\u4f60\u5e94\u8be5\u660e\u767d\uff0c *ptr++ \u88ab\u7406\u89e3\u6210\u8fd4\u56de ptr \u6307\u5411\u7684\u503c\u5e76\u4e14\u81ea\u589e ptr \u7684\u503c\u3002\u8fd9\u548c\u8fd0\u7b97\u7b26\u7684\u4f18\u5148\u7ea7\u6709\u5173\u3002\u5982\u679c\u6211\u4eec\u5199\u6210 (*ptr)++ \uff0c\u5219\u4f1a\u81ea\u589e ptr \u6307\u5411\u7684\u503c\uff0c\u800c\u4e0d\u662f ptr \u7684\u503c\u3002\u6bd4\u5982\uff0c\u6211\u4eec\u628a\u5b83\u7528\u5728\u4e0a\u9762\u6837\u4f8b\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\uff0c'T' \u4f1a\u53d8\u6210 'U'\u3002\u4f60\u53ef\u4ee5\u5199\u4e00\u4e9b\u7b80\u5355\u7684\u6837\u4f8b\u4ee3\u7801\u9a8c\u8bc1\u4e00\u4e0b\u3002 \u518d\u6b21\u5f3a\u8c03\uff0c\u5b57\u7b26\u4e32\u4e0d\u662f\u522b\u7684\u4e1c\u897f\uff0c\u5c31\u662f\u4e00\u4e2a\u7ed3\u5c3e\u4e3a '\\0' \u7684\u5b57\u7b26\u6570\u7ec4\u3002\u6211\u4eec\u524d\u9762\u505a\u7684\u53ea\u662f\u62f7\u8d1d\u5b57\u7b26\u4e32\u3002\u5b83\u6070\u597d\u662f\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u65b9\u6cd5\u4e5f\u7528\u5728 int \u6570\u7ec4\u3001double \u6570\u7ec4\u4e0a\u9762\u3002\u4f46\u5728\u8fd9\u4e9b\u6570\u7ec4\u4e2d\uff0c\u56e0\u4e3a\u4e0d\u662f\u5b57\u7b26\u4e32\uff0c\u6240\u6709\u6ca1\u6709\u5fc5\u8981\u5728\u5c3e\u90e8\u52a0\u4e0a\u50cf nul \u5b57\u7b26\u8fd9\u6837\u7684\u7279\u6b8a\u503c\u3002\u4f46\u6211\u4eec\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e2a\u8fd9\u6837\u7684\u7248\u672c\uff0c\u4f9d\u9760\u4e00\u4e2a\u7279\u6b8a\u503c\u6765\u6807\u8bc6\u7ed3\u5c3e\u3002\u5982\uff0c\u6211\u4eec\u62f7\u8d1d\u4e00\u4e2a\u6b63\u6574\u6570\u6570\u7ec4\uff0c\u53ef\u4ee5\u5728\u5c3e\u90e8\u6807\u8bb0\u4e00\u4e2a\u8d1f\u6570\u3002\u53e6\u5916\uff0c\u6211\u4eec\u5199\u4e00\u4e2a\u51fd\u6570\u6765\u62f7\u8d1d\u4e00\u4e2a\u6570\u7ec4\uff0c\u4e0d\u662f\u5b57\u7b26\u4e32\uff0c\u53ef\u4ee5\u548c\u6570\u7ec4\u5730\u5740\u4e00\u8d77\u628a\u5143\u7d20\u4e2a\u6570\u4f20\u9012\u8fc7\u53bb\uff0c\u8fd9\u5341\u5206\u6709\u7528\u3002\u6bd4\u5982\uff0c\u53ef\u4ee5\u50cf\u4e0b\u9762\u8fd9\u4e2a\u58f0\u660e\u539f\u578b\u4e00\u6837\uff1a void int_copy(int *ptrA, int *ptrB, int nbr); \u8fd9\u91cc\u7684 nbr \u662f\u5c06\u8981\u88ab\u62f7\u8d1d\u7684\u6574\u6570\u4e2a\u6570\u3002\u4f60\u53ef\u80fd\u50cf\u5b9e\u9a8c\u4e00\u4e0b\u8fd9\u4e2a\u60f3\u6cd5\u3002\u521b\u5efa\u4e00\u4e2a\u6574\u6570\u6570\u7ec4\uff0c\u770b\u770b\u4f60\u80fd\u4e0d\u80fd\u5199\u51fa\u80fd\u6b63\u786e\u5de5\u4f5c\u7684 int_copy() \u51fd\u6570\u3002 \u6709\u4e86\u6307\u9488\uff0c\u5c31\u5141\u8bb8\u7528\u51fd\u6570\u6765\u5904\u7406\u5927\u7684\u6570\u7ec4\u3002\u6bd4\u5982\uff0c\u5047\u5982\u6211\u4eec\u6709\u4e00\u4e2a 5000 \u4e2a\u6574\u6570\u7684\u6570\u7ec4\uff0c\u5e76\u4e14\u8981\u7528\u51fd\u6570\u5904\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u53ea\u4f20\u9012\u6570\u7ec4\u7684\u6307\u9488\uff08\u548c\u4e00\u4e9b\u5982\u4e0a\u9762\u63d0\u5230\u7684 nbr \u8fd9\u6837\u7684\u8f85\u52a9\u4fe1\u606f\uff0c\u8fd9\u53d6\u51b3\u4f60\u4f60\u5728\u505a\u4ec0\u4e48\uff09\u3002\u8fd9\u4e2a\u6570\u7ec4\u672c\u8eab\u5e76\u6ca1\u6709\u4f20\u9012\u8fc7\u53bb\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6574\u4e2a\u6570\u7ec4\u6ca1\u6709\u5728\u8c03\u7528\u51fd\u6570\u7684\u65f6\u5019\u88ab\u590d\u5236\u653e\u5230\u6808\u91cc\u9762\uff0c\u800c\u53ea\u6709\u5b83\u7684\u5730\u5740\u3002 \u8fd9\u8ddf\u4f20\u9012\u4e00\u4e2a\u6574\u6570\u7ed9\u51fd\u6570\u4e0d\u4e00\u6837\u3002\u5f53\u6211\u4eec\u4f20\u9012\u4e00\u4e2a\u6574\u6570\u7684\u65f6\u5019\uff0c\u6211\u4eec\u62f7\u8d1d\u4e86\u4e00\u4efd\u8fd9\u4e2a\u6574\u6570\u3002\u5c31\u662f\u53d6\u5f97\u6574\u6570\u7684\u503c\uff0c\u5e76\u653e\u5230\u6808\u91cc\u9762\u3002\u5728\u51fd\u6570\u91cc\u9762\u64cd\u4f5c\u4f20\u8fc7\u6765\u7684\u503c\u5bf9\u539f\u6765\u7684\u503c\u6ca1\u6709\u5f71\u54cd\u3002\u4f46\u5bf9\u4e8e\u6570\u7ec4\u548c\u6307\u9488\uff0c\u6211\u4eec\u53ef\u4ee5\u4f20\u9012\u53d8\u91cf\u7684\u5730\u5740\uff0c\u56e0\u6b64\u53ef\u4ee5\u64cd\u4f5c\u539f\u6765\u53d8\u91cf\u7684\u503c\u3002","title":"Chapter3 \u6307\u9488\u4e0e\u5b57\u7b26\u4e32"},{"location":"chapter4/","text":"\u6211\u4eec\u5728\u77ed\u65f6\u95f4\u5185\u8fdb\u5ea6\u76f8\u5f53\u5feb\u4e86\uff0c\u8ba9\u6211\u4eec\u56de\u8fc7\u5934\uff0c\u6362\u4e2a\u89d2\u5ea6\u770b\u770b Chapter 3 \u4e2d\u5b57\u7b26\u4e32\u7684\u62f7\u8d1d\u4e2d\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48\u3002\u89c2\u5bdf\u4e0b\u9762\u7684\u51fd\u6570\uff1a char *my_strcpy(char dest[], char source[]) { int i = 0; while (source[i] != '\\0') { dest[i] = source[i]; i++; } dest[i] = '\\0'; return dest; } \u518d\u5f3a\u8c03\u4e00\u4e0b\uff0c\u5b57\u7b26\u4e32\u5c31\u662f\u5b57\u7b26\u6570\u7ec4\u3002\u8fd9\u91cc\u6211\u4eec\u9009\u62e9\u4f7f\u7528\u6570\u7ec4\u7b26\u53f7\uff0c\u800c\u4e0d\u662f\u6307\u9488\u7b26\u53f7\u6765\u505a\u5b9e\u9645\u7684\u62f7\u8d1d\u3002\u4f46\u7ed3\u679c\u662f\u4e00\u6837\u7684\uff0c\u4e5f\u5c31\u662f\u7528\u6570\u7ec4\u548c\u6307\u9488\u90fd\u80fd\u62f7\u8d1d\u5b57\u7b26\u4e32\u3002\u8fd9\u5c31\u5f15\u51fa\u4e86\u6211\u4eec\u5c06\u8981\u8ba8\u8bba\u7684\u4e00\u4e2a\u6709\u8da3\u7684\u95ee\u9898\u3002 \u65e2\u7136\u53c2\u6570\u662f\u4f20\u503c\u7684\uff0c\u65e0\u8bba\u4f60\u662f\u4f20\u9012\u4e00\u4e2a\u5b57\u7b26\u6307\u9488\u8fd8\u662f\u50cf\u4e0a\u9762\u7684\u6570\u7ec4\u540d\uff0c\u5b9e\u9645\u4f20\u9012\u8fc7\u53bb\u7684\u5c31\u662f\u6570\u7ec4\u4e2d\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\u3002\u56e0\u6b64\u4f20\u9012\u8fc7\u53bb\u7684\u53c2\u6570\u503c\u662f\u4e00\u6837\u7684\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u4f1a\u4e0d\u4f1a\u610f\u5473\u7740 source[i] \u548c (p+i) \u662f\u4e00\u6837\u7684\u5462\uff1f \u5b9e\u9645\u4e0a\u786e\u5b9e\u5982\u6b64\u3002\u5f53\u6211\u4eec\u5199 a[i] \u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u66ff\u6362\u4e3a *(a+i) \uff0c\u8fd9\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u3002\u7f16\u8bd1\u65f6\uff0c\u7f16\u8bd1\u5668\u4f1a\u751f\u6210\u540c\u6837\u7684\u4ee3\u7801\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u8ba4\u4e3a\u6307\u9488\u8fd0\u7b97\u7b49\u540c\u4e8e\u6570\u7ec4\u7d22\u5f15\uff0c\u6216\u8005\u8bf4\u8bed\u6cd5\u4ea7\u751f\u76f8\u540c\u7684\u7ed3\u679c\u3002 \u4f46\u8fd9\u5e76 \u4e0d \u610f\u5473\u7740\u6307\u9488\u548c\u6570\u7ec4\u5c31\u662f\u4e00\u6837\u7684\u4e1c\u897f\uff0c\u5b83\u4eec\u4e0d\u662f\u3002\u53ea\u662f\u8bf4\uff0c\u6211\u4eec\u8868\u793a\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u7ed9\u5b9a\u5143\u7d20\u65f6\u53ef\u4ee5\u6709 2 \u79cd\u65b9\u6cd5\uff1a\u6570\u7ec4\u7d22\u5f15\u548c\u6307\u9488\uff0c\u5b83\u4eec\u5f97\u5230\u5b8c\u5168\u76f8\u540c\u7684\u7ed3\u679c\u3002 \u73b0\u5728\u8ba9\u6211\u4eec\u770b\u770b\u540e\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff0c\u5b83\u7684 (a+i) \u90e8\u5206\uff0c\u5b83\u4f7f\u7528 + \u64cd\u4f5c\u7b26\uff0c\u662f\u4e00\u4e2a\u7b80\u5355\u7684\u52a0\u6cd5\u3002\u6839\u636e C \u7684\u8bed\u6cd5\u89c4\u5219\uff0c\u8fd9\u79cd\u8868\u8fbe\u5f0f\u670d\u4ece\u4ea4\u6362\u5f8b\uff0c\u5373 (a+i) \u7b49\u540c\u4e8e (i+a) \u3002\u56e0\u6b64\uff0c *(i + a) \u548c *(a + i) \u662f\u4e00\u6837\u7684\u3002 \u4f46 *(i + a) \u5e94\u8be5\u662f\u6765\u6e90\u4e8e i[a] \u5427\u3002\u8fd9\u4e00\u5207\u90fd\u8d77\u56e0\u4e8e\u8fd9\u4e2a\u5947\u602a\u7684\u4e8b\u5b9e\uff0c\u5047\u8bbe\u6709\uff1a char a[20]; int i; \u5e76\u4e14\u6709 a[3] = 'x'; \u8fd9\u548c\u4e0b\u9762\u7684\u8bed\u53e5\u662f\u4e00\u6837\u7684\uff1a 3[a] = 'x'; \u8bd5\u8bd5\u770b\uff01\u5efa\u4e00\u4e2a\u5b57\u7b26\u6570\u7ec4\u3001\u6574\u578b\u6570\u7ec4\u7b49\u7b49\u90fd\u53ef\u4ee5\u3002\u5e76\u7528\u4f20\u7edf\u7684\u65b9\u6cd5\u7ed9\u7b2c\u4e09\u6216\u7b2c\u56db\u4e2a\u5143\u7d20\u8d4b\u4e00\u4e2a\u503c\u3002\u53ef\u4ee5\u5148\u6253\u5370\u4e00\u4e0b\u8fd9\u4e2a\u503c\uff0c\u770b\u770b\u8d4b\u503c\u64cd\u4f5c\u662f\u5426\u8fdb\u884c\u3002\u7136\u540e\u50cf\u4e0a\u9762\u90a3\u6837\u7ffb\u8f6c\u6570\u7ec4\u7b26\u53f7\u3002\u4e00\u4e2a\u826f\u597d\u7684\u7f16\u8bd1\u5668\u662f\u4e0d\u4f1a\u62a5\u9519\uff0c\u5e76\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\u3002\u4e00\u4e2a\u5947\u602a\u7684\u4e1c\u897f..\u6ca1\u6709\u522b\u7684\uff01 \u73b0\u5728\u770b\u770b\u4e0a\u9762\u7684\u51fd\u6570\uff0c\u6211\u4eec\u5199\u4e86\u8fd9\u6837\u4e00\u4e2a\u8bed\u53e5\uff1a dest[i] = source[i]; \u7531\u4e8e\u6570\u7ec4\u7d22\u5f15\u548c\u6307\u9488\u8fd0\u7b97\u5f97\u5230\u76f8\u540c\u7684\u7ed3\u679c\uff0c\u90a3\u6211\u4eec\u4e5f\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a *(dest + i) = *(source + i); \u4f46\u662f\uff0c\u8fd9\u91cc\u6709 2 \u4e2a\u90fd\u6709 i \u53c2\u4e0e\u7684\u52a0\u6cd5\u3002\u8bf4\u53e5\u9898\u5916\u8bdd\uff0c\u4e00\u822c\u6765\u8bb2\uff0c\u4f1a\u6bd4\u81ea\u589e\uff08\u5982 i++ \u91cc\u9762\u7684 ++\uff09\u82b1\u8d39\u66f4\u591a\u7684\u65f6\u95f4\u3002\u4f46\u5bf9\u4e8e\u73b0\u4ee3\u5e26\u6709\u4f18\u5316\u7684\u7f16\u8bd1\u5668\u53ef\u80fd\u4e0d\u5bf9\uff0c\u5e76\u4e0d\u80fd\u786e\u5b9a\u3002\u56e0\u6b64\uff0c\u6307\u9488\u7248\u672c\u8981\u6bd4\u6570\u7ec4\u7248\u672c\u5feb\u4e0a\u4e9b\u8bb8\u3002 \u53e6\u5916\u4e00\u4e2a\u80fd\u52a0\u5feb\u6307\u9488\u7248\u672c\u901f\u5ea6\u7684\u65b9\u6cd5\u662f\u628a\uff1a while (*source != '\\0') \u7b80\u5316\u6210\uff1a while (*source) \u56e0\u4e3a\u62ec\u53f7\u91cc\u9762\u7684\u503c\u662f\u8981\u5230 0 \uff08FALSE\uff09\u3002 \u8fd9\u65f6\uff0c\u4f60\u53ef\u80fd\u60f3\u8981\u81ea\u5df1\u5199\u4e00\u4e9b\u4f7f\u7528\u6307\u9488\u7684\u7a0b\u5e8f\u4f53\u9a8c\u4e00\u628a\u3002\u5904\u7406\u5b57\u7b26\u4e32\u662f\u5b9e\u9a8c\u7684\u597d\u65b9\u6cd5\uff0c\u4f60\u4e5f\u8bb8\u60f3\u8981\u5b9e\u73b0\u81ea\u5df1\u7684\u6807\u51c6\u51fd\u6570\u7248\u672c\uff0c\u5982\u4e0b\u9762\u51e0\u4e2a\uff1a strlen(); strcat(); strchr(); \u6216\u8005\u5176\u4ed6\u4f60\u7684\u7cfb\u7edf\u4e0a\u6709\u7684\u3002 \u6211\u4eec\u5728\u672a\u6765\u7684\u7ae0\u8282\u8fd8\u4f1a\u8c08\u5230\u5b57\u7b26\u4e32\u4ee5\u53ca\u901a\u8fc7\u6307\u9488\u6765\u64cd\u4f5c\u5b57\u7b26\u4e32\u3002\u4f46\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u8c08\u4e00\u4e0b\u7ed3\u6784\u4f53\u5427\u3002","title":"Chapter4 \u518d\u8c08\u5b57\u7b26\u4e32"},{"location":"chapter5/","text":"\u4f60\u53ef\u80fd\u77e5\u9053\uff0c\u6211\u4eec\u53ef\u4ee5\u58f0\u660e\u5305\u542b\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u7684\u4e00\u5757\u6570\u636e\uff0c\u88ab\u79f0\u4f5c\u7ed3\u6784\u4f53\u58f0\u660e\u3002\u4f8b\u5982\uff0c\u4e00\u4e2a\u4eba\u4e8b\u6863\u6848\u5305\u542b\u7684\u7ed3\u6784\u53ef\u80fd\u50cf\u8fd9\u6837\uff1a struct tag { char lname[20]; /* last name */ char fname[20]; /* first name */ int age; /* age */ float rate; /* e.g. 12.75 per hour */ }; \u5047\u8bbe\u5728\u78c1\u76d8\u6587\u4ef6\u4e2d\u6709\u4e00\u5806\u8fd9\u79cd\u7ed3\u6784\uff0c\u6211\u4eec\u60f3\u628a\u6bcf\u4e00\u4e2a\u90fd\u8bfb\u51fa\u6765\u5e76\u6253\u5370\u51fa\u59d3\u540d\uff0c\u4ee5\u4fbf\u4e8e\u6211\u4eec\u5728\u6587\u4ef6\u4e2d\u751f\u6210\u4e00\u4e2a\u5217\u8868\u3002\u5176\u4f59\u7684\u4fe1\u606f\u5e76\u4e0d\u6253\u5370\u51fa\u6765\u3002\u6253\u5370\u7684\u65f6\u5019\u7528\u4e00\u4e2a\u51fd\u6570\u8c03\u7528\uff0c\u5e76\u4f20\u7ed9\u8fd9\u4e2a\u51fd\u6570\u4e00\u4e2a\u6307\u5411\u7ed3\u6784\u4f53\u7684\u6307\u9488\u3002\u4e3a\u4e86\u6f14\u793a\u65b9\u4fbf\uff0c\u8fd9\u91cc\u6211\u53ea\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u3002\u6ce8\u610f\uff0c\u6211\u4eec\u7684\u76ee\u6807\u662f\u5199\u51fa\u8fd9\u4e2a\u51fd\u6570\uff0c\u800c\u4e0d\u662f\u8bfb\u53d6\u6587\u4ef6\uff0c\u6240\u4ee5\u5047\u8bbe\u4f60\u5df2\u7ecf\u77e5\u9053\u8be5\u600e\u4e48\u8bfb\u3002 \u56de\u987e\u4e00\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 . \u64cd\u4f5c\u7b26\u8bbf\u95ee\u7ed3\u6784\u4f53\u6210\u5458\uff0c\u50cf\u8fd9\u6837\uff1a //--------------- program 5.1 ------------------ /* Program 5.1 from PTRTUT10.HTM 6/13/97 */ #include <stdio.h> #include <string.h> struct tag { char lname[20]; /* last name */ char fname[20]; /* first name */ int age; /* age */ float rate; /* e.g. 12.75 per hour */ }; struct tag my_struct; /* declare the structure my_struct */ int main(void) { strcpy(my_struct.lname,\"Jensen\"); strcpy(my_struct.fname,\"Ted\"); printf(\"\\n%s \",my_struct.fname); printf(\"%s\\n\",my_struct.lname); return 0; } //-------------- end of program 5.1 -------------- \u6ce8\u610f\u5230\uff0c\u8fd9\u4e2a\u7ed3\u6784\u6bd4 C \u4e2d\u5e38\u7528\u5230\u7684\u5c0f\u5f88\u591a\uff0c\u6211\u4eec\u53ef\u4ee5\u7ed9\u5b83\u52a0\u597d\u591a\uff1a date_of_hire; (\u6ca1\u6709\u7ed9\u51fa\u6570\u636e\u7c7b\u578b) date_of_last_raise; last_percent_increase; emergency_phone; medical_plan; Social_S_Nbr; etc..... \u5982\u679c\u6211\u4eec\u6709\u5f88\u591a\u5458\u5de5\uff0c\u5904\u7406\u7ed3\u6784\u4f53\u6570\u636e\u7684\u8bdd\u80af\u5b9a\u662f\u8981\u7528\u51fd\u6570\u3002\u4f8b\u5982\uff0c\u6211\u4eec\u53ef\u80fd\u8981\u6253\u5370\u51fa\u4f20\u5230\u51fd\u6570\u7684\u7ed3\u6784\u4f53\u91cc\u9762\u7684\u5458\u5de5\u59d3\u540d\u3002\u7136\u800c\uff0c\u5728\u539f\u59cb\u7684 C \u91cc\u9762\uff08Kernighan & Ritchie, 1st Edition\uff09\uff0c\u4e0d\u5141\u8bb8\u4f20\u9012\u7ed3\u6784\uff0c\u53ea\u80fd\u4f20\u9012\u7ed3\u6784\u4f53\u7684\u6307\u9488\u3002\u4f46\u5728 ANSI C \u91cc\uff0c\u662f\u53ef\u4ee5\u4f20\u9012\u4e00\u4e2a\u5b8c\u6574\u7684\u7ed3\u6784\u4f53\u3002\u65e2\u7136\u6211\u4eec\u662f\u5b66\u4e60\u6307\u9488\uff0c\u6240\u4ee5\u4e0d\u518d\u8ba8\u8bba\u8fd9\u4e2a\u3002 \u4e0d\u7ba1\u600e\u6837\uff0c\u5982\u679c\u6211\u4eec\u4f20\u9012\u4e00\u4e2a\u5b8c\u6574\u7684\u7ed3\u6784\u4f53\uff0c\u90a3\u5c31\u610f\u5473\u7740\u6211\u4eec\u5fc5\u987b\u4ece\u8c03\u7528\u51fd\u6570\u62f7\u8d1d\u8fd9\u4e2a\u7ed3\u6784\u4f53\u7684\u5168\u90e8\u5185\u5bb9\u5230\u88ab\u8c03\u51fd\u6570\u91cc\u9762\u3002\u5728\u4f7f\u7528\u6808\u7684\u7cfb\u7edf\u4e2d\uff0c\u8fd9\u5c06\u4f1a\u628a\u6574\u4e2a\u7ed3\u6784\u4f53\u653e\u8fdb\u6808\u4e2d\u3002\u5982\u679c\u7ed3\u6784\u4f53\u8fc7\u5927\uff0c\u8fd9\u5c06\u4f1a\u9047\u5230\u9ebb\u70e6\u3002\u4f46\u4f20\u9012\u4e00\u4e2a\u6307\u9488\u8fc7\u53bb\uff0c\u4fbf\u80fd\u6700\u5c0f\u5316\u4f7f\u7528\u6808\u7a7a\u95f4\u3002 \u65e0\u8bba\u5982\u4f55\uff0c\u65e2\u7136\u662f\u8ba8\u8bba\u6307\u9488\uff0c\u90a3\u6211\u4eec\u5c31\u6765\u8c08\u8c08\u600e\u6837\u4f20\u9012\u4e00\u4e2a\u7ed3\u6784\u4f53\u6307\u9488\uff0c\u5e76\u5728\u51fd\u6570\u91cc\u9762\u4f7f\u7528\u5b83\u3002 \u770b\u770b\u521a\u624d\u6211\u4eec\u8bf4\u7684\u4e00\u79cd\u60c5\u51b5\uff1a\u60f3\u8981\u4e00\u4e2a\u51fd\u6570\uff0c\u63a5\u53d7\u4e00\u4e2a\u7ed3\u6784\u4f53\u6307\u9488\u4f5c\u4e3a\u53c2\u6570\uff0c\u5e76\u5728\u51fd\u6570\u91cc\u9762\u8bbf\u95ee\u8be5\u7ed3\u6784\u4f53\u7684\u6210\u5458\u3002\u4f8b\u5982\uff0c\u5728\u6211\u4eec\u7684\u793a\u4f8b\u7ed3\u6784\u4f53\u4e2d\u6253\u5370\u5458\u5de5\u59d3\u540d\u3002 \u597d\u4e86\uff0c\u65e2\u7136\u77e5\u9053\u6211\u4eec\u7684\u6307\u9488\u662f\u8981\u6307\u5411\u4f7f\u7528 struct tag \u58f0\u660e\u7684\u7ed3\u6784\u4f53\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u58f0\u660e\u4e00\u4e2a\u7ed3\u6784\u4f53\u6307\u9488\uff1a struct tag *st_ptr; \u7136\u540e\u628a\u5b83\u6307\u5411\u6211\u4eec\u7684\u7ed3\u6784\u4f53\uff1a st_ptr = &my_struct; \u73b0\u5728\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u89e3\u5f15\u7528\u6765\u8bbf\u95ee\u65e2\u5b9a\u7684\u6210\u5458\u3002\u4f46\u662f\uff0c\u5e94\u8be5\u600e\u4e48\u6837\u89e3\u9006\u5f15\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u6307\u9488\u5462\uff1f\u597d\u5427\uff0c\u5047\u8bbe\u6211\u4eec\u8981\u7528\u8fd9\u4e2a\u6307\u9488\u53bb\u8bbe\u7f6e\u5458\u5de5\u7684\u5e74\u9f84\uff0c\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a (*st_ptr).age = 63; \u4ed4\u7ec6\u770b\u770b\u8fd9\u4e2a\u8bed\u53e5\uff0c\u4e5f\u5c31\u662f\u7528\u62ec\u53f7\u91cc\u9762\u7684\u4e1c\u897f\u4ee3\u66ff st_ptr \u6307\u5411\u7684\u4e1c\u897f\uff0c\u5373\u7ed3\u6784\u4f53 my_struct \u3002\u56e0\u6b64\uff0c\u8fd9\u5176\u5b9e\u662f\u548c my_struct.age \u4e00\u6837\u7684\u3002 \u7136\u800c\uff0c\u8fd9\u662f\u4e00\u4e2a\u5341\u5206\u5e38\u7528\u7684\u8868\u8fbe\u5f0f\uff0c\u56e0\u6b64\uff0cC \u8bed\u8a00\u7684\u8bbe\u8ba1\u8005\u521b\u5efa\u4e86\u4e00\u4e2a\u66ff\u4ee3\u8bed\u6cd5\u6765\u505a\u8fd9\u4ef6\u4e8b\uff1a st_ptr->age = 63; \u60f3\u60f3\u8fd9\u4e2a\uff0c\u770b\u4e00\u4e0b\u4e0b\u9762\u7684\u7a0b\u5e8f\uff1a //------------ program 5.2 --------------------- /* Program 5.2 from PTRTUT10.HTM 6/13/97 */ #include <stdio.h> #include <string.h> struct tag{ /* the structure type */ char lname[20]; /* last name */ char fname[20]; /* first name */ int age; /* age */ float rate; /* e.g. 12.75 per hour */ }; struct tag my_struct; /* define the structure */ void show_name(struct tag *p); /* function prototype */ int main(void) { struct tag *st_ptr; /* a pointer to a structure */ st_ptr = &my_struct; /* point the pointer to my_struct */ strcpy(my_struct.lname,\"Jensen\"); strcpy(my_struct.fname,\"Ted\"); printf(\"\\n%s \",my_struct.fname); printf(\"%s\\n\",my_struct.lname); my_struct.age = 63; show_name(st_ptr); /* pass the pointer */ return 0; } void show_name(struct tag *p) { printf(\"\\n%s \", p->fname); /* p points to a structure */ printf(\"%s \", p->lname); printf(\"%d\\n\", p->age); } -------------------- end of program 5.2 ---------------- \u518d\u6b21\u58f0\u660e\uff0c\u8fd9\u91cc\u6709\u5f88\u591a\u4e1c\u897f\u9700\u8981\u4e00\u6b21\u7406\u89e3\uff0c\u6240\u4ee5\u8bfb\u8005\u5e94\u8be5\u7f16\u8bd1\u8fd0\u884c\u4e0d\u540c\u7684\u4ee3\u7801\u7247\u6bb5\uff0c\u5355\u6b65\u8c03\u8bd5 main \u51fd\u6570\u5e76\u89c2\u5bdf\u4e00\u4e0b my_struct \u548c p \u8fd9\u4e9b\u53d8\u91cf\u3002\u5e76\u4e14\u8981\u8fdb\u5165\u51fd\u6570\u91cc\u9762\u770b\u770b\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48\u3002","title":"Chapter5 \u6307\u9488\u4e0e\u7ed3\u6784\u4f53"},{"location":"chapter6/","text":"\u597d\u5427\uff0c\u8ba9\u6211\u4eec\u518d\u6b21\u56de\u5230\u5b57\u7b26\u4e32\u3002\u4e0b\u9762\u6240\u6709\u7684\u8d4b\u503c\u8bed\u53e5\u90fd\u7406\u89e3\u6210\u5168\u5c40\u7684\uff0c\u5373\u5728\u6240\u6709\u51fd\u6570\u5916\u9762\uff0c\u5305\u62ec main \u51fd\u6570\u3002 \u6211\u4eec\u5728\u4e4b\u524d\u7684\u7ae0\u8282\u8bf4\u8fc7\uff0c\u8fd9\u6837\u5199\uff1a char my_string[40] = \"Ted\"; \u4f1a\u7ed9\u8fd9 40 \u5b57\u8282\u7684\u6570\u7ec4\u5206\u914d\u7a7a\u95f4\uff0c\u5e76\u628a\u8fd9\u4e2a\u5b57\u7b26\u4e32\u653e\u5728\u524d 4 \u4e2a\u5b57\u8282\uff083 \u4e2a\u5f15\u53f7\u4e2d\u7684\u5b57\u7b26\u548c\u4e00\u4e2a '\\0' \uff09\u3002 \u5b9e\u9645\u4e0a\uff0c\u5982\u679c\u6211\u4eec\u53ea\u662f\u60f3\u5b58\u50a8 \"Ted\" \u8fd9\u4e2a\u540d\u5b57\uff0c\u5b8c\u5168\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a char my_name[] = \"Ted\"; \u7f16\u8bd1\u5668\u4f1a\u6570\u51fa\u5b57\u7b26\u6570\uff0c\u5e76\u7559\u51fa nul \u5b57\u7b26\u7684\u7a7a\u95f4\uff0c\u5c06\u8fd9\u6240\u6709\u7684 4 \u4e2a\u5b57\u7b26\u5b58\u5230\u5185\u5b58\u4e2d\u3002\u4f4d\u7f6e\u5c06\u88ab\u8fd4\u56de\u7ed9\u6570\u7ec4\u540d\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u662f my_name \u3002 \u5728\u6709\u7684\u4ee3\u7801\u4e2d\uff0c\u4f60\u53ef\u80fd\u4f1a\u770b\u5230\u8fd9\u6837\uff0c\u800c\u4e0d\u662f\u4e0a\u9762\u90a3\u79cd\uff1a char *my_name = \"Ted\"; \u8fd9\u4e5f\u662f\u4e00\u79cd\u65b9\u6cd5\u3002\u5b83\u4eec\u6709\u4ec0\u4e48\u4e0d\u540c\u5417\uff1f\u7b54\u6848\u662f ... \u786e\u5b9e\u6709\u3002\u7528\u6570\u7ec4\u7b26\u53f7\u7684\u8bdd\uff0c\u5c06\u4f1a\u5728\u5185\u5b58\u7684 static \u533a\u5206\u914d 4 \u5b57\u8282\u5185\u5b58\uff0c3 \u4e2a\u5b57\u7b26\u52a0\u4e0a nul \u5b57\u7b26\u3002\u4f46\u662f\u7528\u6307\u9488\u7684\u5f62\u5f0f\uff0c\u9664\u4e86\u8fd9 4 \u4e2a\u5b57\u8282\u4e4b\u5916\uff0c \u52a0\u4e0a N \u4e2a\u5b57\u8282\u53bb\u5b58\u6307\u9488\u53d8\u91cf my_name \uff08N \u53d6\u51b3\u4e8e\u4f60\u7684\u7cfb\u7edf\uff0c\u6700\u5c11 2 \u4e2a\u5b57\u8282\uff0c\u6216\u8005 4 \u4e2a\uff0c\u6216\u8005\u66f4\u591a\uff09\u3002 \u5728\u6570\u7ec4\u58f0\u660e\u4e2d\uff0c my_name \u662f &myname[0] \uff08\u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\uff09\u7684\u7b80\u5199\uff0c\u65e2\u7136\u6570\u7ec4\u7684\u5730\u5740\u5728\u8fd0\u884c\u7684\u65f6\u5019\u662f\u56fa\u5b9a\u7684\uff0c\u90a3\u4e48\u5b83\u662f\u4e00\u4e2a\u5e38\u91cf\uff08\u4e0d\u662f\u53d8\u91cf\uff09\u3002\u5728\u6307\u9488\u58f0\u660e\u4e2d my_name \u5374\u662f\u4e00\u4e2a\u53d8\u91cf\u3002\u54ea\u4e00\u4e2a \u66f4\u597d \uff1f\u8fd9\u53d6\u51b3\u4e8e\u4f60\u7684\u7a0b\u5e8f\u8981\u5e72\u4ec0\u4e48\u3002 \u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u66f4\u8fdb\u4e00\u6b65\u770b\u770b\uff0c\u5982\u679c\u6bcf\u4e2a\u58f0\u660e\u90fd\u653e\u5728\u51fd\u6570\u91cc\u9762\uff0c\u800c\u4e0d\u662f\u5168\u5c40\u7684\u4f1a\u600e\u4e48\u6837\uff1a void my_function_A(char *ptr) { char a[] = \"ABCDE\" //... //... } void my_function_B(char *ptr) { char *cp = \"FGHIJ\" . . } \u5728 my_function_A \u4e2d\uff0c\u6570\u7ec4 a[] \u7684\u5185\u5bb9\u6216\u8005\u8bf4\u662f\u503c\uff0c\u88ab\u5f53\u4f5c\u6570\u636e\u3002\u6570\u7ec4\u88ab\u521d\u59cb\u5316\u4e3a \"ABCDE\"\uff1b\u800c\u5728 my_function_B \u91cc\u9762\uff0c\u6307\u9488 cp \u7684\u503c\u88ab\u5f53\u4f5c\u6570\u636e\uff0c\u88ab\u521d\u59cb\u5316\u4e3a\u6307\u5411\u5b57\u7b26\u4e32 \"FGHIJ\"\u3002\u65e0\u8bba\u662f\u5728 my_function_A \u4e2d\u8fd8\u662f my_function_B \u4e2d\uff0c\u5b9a\u4e49\u90fd\u662f\u5c40\u90e8\u53d8\u91cf\uff0c\u56e0\u6b64\u5b57\u7b26\u4e32 \"ABCDE\" \u88ab\u5b58\u653e\u5728\u6808\u4e2d\uff0c\u548c\u6307\u9488 cp \u7684\u503c\u4e00\u6837\u3002\u4f46\u5b57\u7b26\u4e32 \"FGHIJ\" \u5374\u53ef\u4ee5\u5b58\u5728\u4efb\u610f\u5730\u65b9\u3002\u5728\u6211\u7684\u7cfb\u7edf\u4e2d\uff0c\u5b83\u88ab\u5b58\u653e\u5728\u6570\u636e\u6bb5\u3002 \u987a\u4fbf\u4e00\u63d0\uff0c\u50cf\u4e0a\u9762 my_function_A \u4e2d\u90a3\u6837\u7684\u6570\u7ec4\u81ea\u52a8\u53d8\u91cf\u521d\u59cb\u5316\uff0c\u5728\u8001\u7684 K&R C \u4e2d\u662f\u975e\u6cd5\u7684\uff0c\u5230 ANSI C \u4e2d\u624d\u201c\u5230\u8fbe\u5408\u6cd5\u5e74\u9f84\u201d\u3002\u4e8b\u5b9e\u4e0a\uff0c\u5f53\u8003\u8651\u53ef\u79fb\u690d\u6027\u548c\u53cd\u5411\u517c\u5bb9\u6027\u7684\u65f6\u5019\u8fd9\u4f1a\u5f88\u91cd\u8981\u3002 \u65e2\u7136\u6211\u4eec\u5728\u8ba8\u8bba\u6307\u9488\u548c\u6570\u7ec4\u7684\u5173\u7cfb/\u8be7\u5f02\uff0c\u90a3\u8ba9\u6211\u4eec\u770b\u770b\u591a\u4f4d\u6570\u7ec4\u3002\u5982\u4e0b\u9762\u8fd9\u4e2a\u6570\u7ec4\uff1a char multi[5][10]; \u8fd9\u662f\u4ec0\u4e48\u610f\u601d\u5462\uff1f\u8ba9\u6211\u4eec\u770b\u770b\u4e0b\u9762\u3002 char multi[5] [10]; \u6211\u4eec\u628a\u4e0b\u5212\u7ebf\u7684\u90a3\u90e8\u5206\u5f53\u4f5c\u6570\u7ec4\u7684\u201c\u540d\u5b57\u201d\uff0c\u6839\u636e\u524d\u9762\u7684 char \u548c\u540e\u9762\u7684\uff0c\u6211\u4eec [10] \uff0c\u6211\u4eec\u53ef\u4ee5\u6709\u4e00\u4e2a10\u5b57\u7b26\u7684\u6570\u7ec4\u3002\u4f46\u662f multi[5] \u8fd9\u4e2a\u540d\u5b57\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u6570\u7ec4\uff0c\u5b83\u6709 5 \u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a 10 \u4e2a\u5b57\u7b26\u7684\u6570\u7ec4\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u5f97\u5230\u4e00\u4e2a 5 \u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5143\u7d20 10 \u4e2a\u5b57\u7b26\u3002 \u5047\u8bbe\u6211\u4eec\u7528\u67d0\u4e9b\u6570\u636e\u586b\u5145\u4e86\u8fd9\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u3002\u5728\u5185\u5b58\u4e2d\uff0c\u5b83\u53ef\u80fd\u770b\u8d77\u6765\u50cf\u521d\u59cb\u5316 5 \u4e2a\u72ec\u7acb\u7684\u6570\u7ec4\u4e00\u6837\uff1a multi[0] = {'0','1','2','3','4','5','6','7','8','9'} multi[1] = {'a','b','c','d','e','f','g','h','i','j'} multi[2] = {'A','B','C','D','E','F','G','H','I','J'} multi[3] = {'9','8','7','6','5','4','3','2','1','0'} multi[4] = {'J','I','H','G','F','E','D','C','B','A'} \u5e76\u4e14\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u53ef\u4ee5\u7528\u8fd9\u6837\u7684\u8bed\u6cd5\u6765\u5bfb\u5740\uff1a multi[0][3] = '3' multi[1][7] = 'h' multi[4][0] = 'J' \u65e2\u7136\u6570\u7ec4\u5728\u5185\u5b58\u4e2d\u662f\u8fde\u7eed\u7684\uff0c\u4e0a\u9762\u7684\u6570\u7ec4\u5728\u5b9e\u9645\u7684\u5185\u5b58\u4e2d\u5e94\u8be5\u662f\u8fd9\u6837\uff1a 0123456789abcdefghijABCDEFGHIJ9876543210JIHGFEDCBA ^ |_____ starting at the address &multi[0][0] \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6211\u6ca1\u6709\u5199 multi[0] = \"0123456789\"; \uff0c\u8fd9\u6837\u7684\u8bdd\uff0c '\\0' \u4f1a\u81ea\u52a8\u6dfb\u52a0\uff0c\u56e0\u4e3a\u4e0d\u7ba1\u4ec0\u4e48\u65f6\u5019\u51fa\u73b0\u53cc\u5f15\u53f7 '\\0' \u90fd\u4f1a\u88ab\u81ea\u52a8\u52a0\u4e0a\u7684\u3002\u90a3\u6837\u7684\u8bdd\uff0c\u6211\u5c31\u9700\u8981\u7559\u51fa 11 \u5b57\u8282\u7684\u7a7a\u95f4\uff0c\u800c\u4e0d\u662f 10 \u4e2a\u3002 \u6211\u4e0a\u9762\u7684\u76ee\u7684\u662f\u5c55\u793a\u4e8c\u7ef4\u6570\u7ec4\u5728\u5185\u5b58\u4e2d\u662f\u600e\u6837\u6392\u5217\u7684\u3002\u5e76\u4e14\uff0c\u8fd9\u662f\u4e00\u4e2a\u4e8c\u7ef4\u5b57\u7b26\u6570\u7ec4\uff0c \u5e76\u4e0d\u662f \u201c\u5b57\u7b26\u4e32\u6570\u7ec4\u201d\u3002 \u73b0\u5728\uff0c\u7f16\u8bd1\u5668\u77e5\u9053\u6570\u7ec4\u4e2d\u6709\u591a\u5c11\u5217\uff0c\u56e0\u6b64\u5b83\u80fd\u89e3\u91ca multi + 1 \u4e3a\u7b2c\u4e8c\u884c\u4e2d 'a' \u7684\u5730\u5740\u3002\u90a3\u662f\u56e0\u4e3a\uff0c\u5b83\u52a0\u4e86\u5217\u6570 10\uff0c\u5f97\u5230\u4e86\u8fd9\u4e2a\u4f4d\u7f6e\u3002\u5982\u679c\u6211\u4eec\u5904\u7406\u7684\u662f\u6574\u6570\u5e76\u4e14\u662f\u540c\u6837\u7ef4\u6570\u7684\u6570\u7ec4 \uff0c\u7f16\u8bd1\u5668\u4f1a\u52a0\u4e0a 10*sizeof(int) \uff0c\u5728\u6211\u7684\u673a\u5668\u4e0a\u662f 20\u3002\u56e0\u6b64\u7b2c\u56db\u884c\u4e2d 9 \u7684\u5730\u5740\u5c06\u8868\u793a\u6210 &multi[3][0] \u6216\u8005\u6307\u9488\u5f62\u5f0f *(multi + 3) \u3002\u4e3a\u4e86\u5f97\u5230\u7b2c\u56db\u884c\u7b2c\u4e8c\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u628a\u8fd9\u4e2a\u5730\u5740\u52a0 1\uff0c\u5e76\u8fdb\u884c\u89e3\u5f15\u7528\uff1a *(*(multi + 3) + 1) \u7a0d\u5fae\u603b\u7ed3\u4e00\u4e0b\uff0c\u53ef\u4ee5\u5f97\u5230\u4e0b\u9762\u7684\u7ed3\u8bba\uff1a *(*(multi + row) + col) and multi[row][col] yield the same results. \u4e0b\u9762\u7684\u7a0b\u5e8f\u7528\u6574\u578b\u6570\u7ec4\uff0c\u800c\u4e0d\u662f\u5b57\u7b26\u6570\u7ec4\uff0c\u5c55\u793a\u4e86\u8fd9\u4e00\u70b9\uff1a //------------------- program 6.1 ---------------------- /* Program 6.1 from PTRTUT10.HTM 6/13/97*/ #include <stdio.h> #define ROWS 5 #define COLS 10 int multi[ROWS][COLS]; int main(void) { int row, col; for (row = 0; row < ROWS; row++) { for (col = 0; col < COLS; col++) { multi[row][col] = row*col; } } for (row = 0; row < ROWS; row++) { for (col = 0; col < COLS; col++) { printf(\"\\n%d \",multi[row][col]); printf(\"%d \",*(*(multi + row) + col)); } } return 0; } //----------------- end of program 6.1 --------------------- \u56e0\u4e3a\u8fd9\u4e2a\u6307\u9488\u7248\u672c\u9700\u8981 2 \u6b21\u89e3\u5f15\u7528\uff0c\u4e8c\u7ef4\u6570\u7ec4\u7684\u540d\u5b57\u7ecf\u5e38\u88ab\u8bf4\u6210\u4e0e\u6307\u9488\u7684\u6307\u9488\u7b49\u4ef7\u3002\u5bf9\u4e8e\u4e00\u4e2a\u4e09\u7ef4\u6570\u7ec4\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u5728\u5904\u7406\u4e00\u4e2a\u6570\u7ec4\u7684\u6570\u7ec4\u7684\u6570\u7ec4\uff0c\u6709\u4eba\u8ba4\u4e3a\u5b83\u7684\u540d\u5b57\u548c\u6307\u9488\u7684\u6307\u9488\u7684\u6307\u9488\u7b49\u4ef7\u3002\u7136\u800c\uff0c\u6211\u4eec\u901a\u8fc7\u6570\u7ec4\u7b26\u53f7\u4e3a\u8fd9\u4e2a\u6570\u7ec4\u521d\u59cb\u7559\u51fa\u5185\u5b58\u5757\uff0c\u56e0\u6b64\uff0c\u6211\u4eec\u5904\u7406\u7684\u662f\u4e00\u4e2a\u5e38\u91cf\uff0c\u800c\u4e0d\u662f\u53d8\u91cf\u3002\u8fd9\u5c31\u662f\u6211\u4eec\u8ba8\u8bba\u7684\u4e00\u4e2a\u56fa\u5b9a\u7684\u5185\u5b58\u5730\u5740\uff0c\u4e0d\u662f\u4e00\u4e2a\u53ef\u53d8\u6307\u9488\u53d8\u91cf\u3002\u4e0a\u9762\u7528\u5230\u7684\u9006\u5f15\u7528\u529f\u80fd\u8fd0\u884c\u6211\u4eec\u8bbf\u95ee\u6570\u7ec4\u7684\u6570\u7ec4\u4e2d\u7684\u4efb\u4f55\u5143\u7d20\uff0c\u800c\u4e0d\u9700\u8981\u6539\u53d8\u90a3\u4e2a\u503c\uff08 multi[0][0] \u7684\u5730\u5740\u901a\u8fc7 mutil \u8fd9\u4e2a\u7b26\u53f7\u7ed9\u51fa\uff09\u3002","title":"Chapter6 \u5b57\u7b26\u4e32\u65b0\u8c08\u53ca\u5b57\u7b26\u4e32\u6570\u7ec4"},{"location":"chapter7/","text":"\u5728\u524d\u4e00\u7ae0\u4e2d\uff0c\u6211\u4eec\u6ce8\u610f\u5230\u7ed9\u5b9a\uff1a #define ROWS 5 #define COLS 10 int multi[ROWS][COLS]; \u6211\u4eec\u8bbf\u95ee mutil \u4e2d\u7684\u67d0\u4e00\u5143\u7d20\u65f6\uff0c\u53ef\u4ee5\u901a\u8fc7\uff1a multi[row][col] \u6216\u8005\uff1a *(*(multi + row) + col) \u4e3a\u4e86\u5168\u9762\u7406\u89e3\u5230\u5e95\u53d1\u751f\u4e86\u4ec0\u4e48\uff0c\u6211\u4eec\u628a\uff1a *(multi + row) \u66ff\u6362\u6210 X \uff0c\u50cf\u8fd9\u6837\uff1a *(X + col) \u73b0\u5728\uff0c\u4ece\u8fd9\u91cc\u770b\uff0c X \u50cf\u4e00\u4e2a\u6307\u9488\uff0c\u56e0\u4e3a\u6211\u4eec\u4f7f\u7528\u4e86\u9006\u5f15\u7528\uff0c\u5e76\u4e14 col \u662f\u4e00\u4e2a\u6574\u6570\u3002\u8fd9\u91cc\u7528\u5230\u7684\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u8fd0\u7b97\uff0c\u53eb\u505a\u6307\u9488\u8fd0\u7b97\u3002\u8fd9\u610f\u5473\u7740\uff0c\u56e0\u4e3a\u6211\u4eec\u8bf4\u7684\u662f\u6574\u578b\u6570\u7ec4\uff0c\u90a3\u4e48 X + col + 1 \u6307\u5411\u7684\u5730\u5740\uff08\u5373 X + col + 1 \u7684\u503c\uff09\u4e00\u5b9a\u6bd4 X + col \u6307\u5411\u7684\u5730\u5740\u5927\uff0c\u5e76\u4e14\u5927 sizeof(int) \u3002 \u65e2\u7136\u6211\u4eec\u77e5\u9053\u4e8c\u7ef4\u6570\u7ec4\u5728\u5185\u5b58\u4e2d\u7684\u5e03\u5c40\uff0c\u90a3\u4e48\u6211\u4eec\u80fd\u591f\u8ba1\u7b97\u51fa\uff0c\u5982\u5728\u4e0a\u9762\u7528\u5230\u7684\u8868\u8fbe\u5f0f multi + row \u57fa\u7840\u4e0a\uff0c multi + row + 1 \u4e00\u5b9a\u589e\u52a0\u4e86\u80fd\u591f\u6307\u5411\u4e0b\u4e00\u884c\u7684\u6570\u503c\uff0c\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u7b49\u4e8e COLS * sizeof(int) \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u5728\u8fd0\u884c\u65f6\u8868\u8fbe\u5f0f *(*(multi + row) + col) \u88ab\u6b63\u786e\u8ba1\u7b97\uff0c\u90a3\u7f16\u8bd1\u5668\u751f\u6210\u7684\u4ee3\u7801\u5fc5\u987b\u8003\u8651\u5230 COLS \u7684\u503c\uff0c\u5373\u7b2c\u4e8c\u7ef4\u3002\u56e0\u4e3a 2 \u4e2d\u5f62\u5f0f\u7684\u8868\u8fbe\u5f0f\u662f\u7b49\u4ef7\u7684\uff0c\u8fd9\u91cc\u65e0\u8bba\u662f\u7528\u6307\u9488\u8868\u8fbe\u5f0f\u8fd8\u662f\u6570\u7ec4\u8868\u8fbe\u5f0f multi[row][col] \u90fd\u662f\u6b63\u786e\u7684\u3002 \u56e0\u6b64\uff0c\u65e0\u8bba\u8ba1\u7b97\u54ea\u79cd\u8868\u8fbe\u5f0f\uff0c\u8fd9 5 \u4e2a\u503c\u5fc5\u987b\u77e5\u9053\uff1a \u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\uff0c\u5b83\u88ab\u8868\u8fbe\u5f0f multi \u8fd4\u56de\uff0c\u5373\u6570\u7ec4\u7684\u540d\u5b57 \u6570\u7ec4\u5143\u7d20\u7c7b\u578b\u7684\u5927\u5c0f\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u662f sizeof(int) \u6570\u7ec4\u7684\u7b2c\u4e8c\u7ef4 \u7b2c\u4e00\u7ef4\u5ea6\u7684\u7ed9\u5b9a\u7d22\u5f15\u503c\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u662f row \u7b2c\u4e8c\u7ef4\u5ea6\u7684\u7ed9\u5b9a\u7d22\u5f15\u503c\uff0c\u8fd9\u4e2a\u4f8b\u5b50\u662f col \u8fd9\u4e9b\u90fd\u7ed9\u51fa\u4ee5\u540e\uff0c\u60f3\u60f3\u5982\u4f55\u8bbe\u8ba1\u4e00\u4e2a\u51fd\u6570\u53bb\u5904\u7406\u524d\u9762\u58f0\u660e\u7684\u6570\u7ec4\u7684\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u5c06\u6570\u7ec4 multi \u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u8bbe\u7f6e\u4e3a 1\u3002 void set_value(int m_array[][COLS]) { int row, col; for (row = 0; row < ROWS; row++) { for (col = 0; col < COLS; col++) { m_array[row][col] = 1; } } } \u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\uff1a set_value(multi); \u73b0\u5728\uff0c\u6211\u4eec\u5728\u51fd\u6570\u91cc\u9762\u4f7f\u7528 #define \u5b9a\u4e49\u4e86 ROWS \u548c COLS \uff0c\u5b83\u4eec\u662f\u5faa\u73af\u7684\u7ec8\u6b62\u6761\u4ef6\u3002\u4f46\u662f\u5b8f\u5b9a\u4e49\u4ec5\u4ec5\u662f\u53ea\u6709\u7f16\u8bd1\u5668\u5173\u5fc3\u7684\u5e38\u91cf\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u51fd\u6570\u91cc\u9762\u4e0d\u4f1a\u628a\u5b83\u4eec\u548c\u6570\u7ec4\u5927\u5c0f\u8054\u7cfb\u8d77\u6765\u3002\u5f53\u7136\uff0c row \u548c col \u662f\u5c40\u90e8\u53d8\u91cf\u3002\u5f62\u53c2\u7684\u5b9a\u4e49\u5141\u8bb8\u7f16\u8bd1\u5668\u5728\u8fd0\u884c\u65f6\u8ba1\u7b97\u4e0e\u4f20\u8fc7\u6765\u7684\u6307\u9488\u76f8\u5173\u7684\u7279\u5f81\u503c\uff0c\u56e0\u6b64\u6211\u4eec\u4e0d\u9700\u8981\u7b2c\u4e00\u7ef4\u3002\u6b63\u5982\u540e\u9762\u770b\u5230\u7684\u90a3\u6837\uff0c\u6211\u4eec\u6ca1\u6709\u5728\u53c2\u6570\u91cc\u9762\u5b9a\u4e49\u5b83\u3002\u51fa\u4e8e\u4e60\u60ef\u548c\u4e00\u81f4\u6027\uff0c\u6211\u8fd9\u91cc\u6ca1\u6709\u7528\u5b83\u3002\u4f46\u662f\uff0c\u7b2c\u4e8c\u7ef4\u4e00\u5b9a\u5f97\u5728\u53c2\u6570\u91cc\u9762\u5199\u51fa\u6765\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u9700\u8981\u5b83\u6765\u8ba1\u7b97 m_array[row][col] \u3002\u65e2\u7136\u53c2\u6570\u5b9a\u4e49\u4e86\u6570\u636e\u7c7b\u578b\uff08\u8fd9\u4e2a\u4f8b\u5b50\u662f int \uff09\u5e76\u4e14\u8fed\u4ee3\u53d8\u91cf\u5728 for \u5faa\u73af\u4e2d\u5b9a\u4e49\u4e86\uff0c\u90a3\u4e48\u53ea\u6709\u4e00\u4e2a\u503c\u53ef\u4ee5\u53ea\u7528\u4e00\u4e2a\u53c2\u6570\u4f20\u8fc7\u6765\u3002\u5728\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5c31\u662f mutil \u7684\u503c\uff0c\u50cf\u8c03\u7528\u8bed\u53e5\u5199\u7684\u90a3\u6837\uff0c\u5373\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\uff0c\u5b83\u7ecf\u5e38\u88ab\u53eb\u505a\u8fd9\u4e2a\u6570\u7ec4\u7684\u6307\u9488\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u544a\u8bc9\u7f16\u8bd1\u5668\u7b2c\u4e8c\u7ef4\u7684\u552f\u4e00\u9014\u5f84\u5c31\u662f\u628a\u5b83\u660e\u786e\u5730\u52a0\u5728\u53c2\u6570\u5b9a\u4e49\u91cc\u9762\u3002 \u5b9e\u9645\u4e0a\uff0c\u4e00\u822c\u5728\u5904\u7406\u591a\u7ef4\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u6240\u6709\u5927\u4e8e\u4e00\u7ef4\u7684\u7ef4\u5ea6\u90fd\u662f\u9700\u8981\u7684\u3002\u6bd4\u5982\u6211\u4eec\u8ba8\u8bba\u4e09\u7ef4\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u7b2c\u4e8c\u7ef4 \u548c \u7b2c\u4e09\u7ef4\u90fd\u9700\u8981\u5728\u53c2\u6570\u5b9a\u4e49\u4e2d\u5199\u660e\u3002","title":"Chapter7 \u518d\u8c08\u591a\u7ef4\u6570\u7ec4"},{"location":"chapter8/","text":"\u6307\u9488\u5f53\u7136\u662f\u53ef\u4ee5\u201c\u6307\u5411\u201d\u6240\u6709\u7c7b\u578b\u7684\u6570\u636e\u5bf9\u8c61\uff0c\u5305\u62ec\u6570\u7ec4\u3002\u7136\u800c\u5f88\u660e\u663e\uff0c\u5f53\u6211\u4eec\u8ba8\u8bba program 3.1 \u7684\u65f6\u5019\uff0c\u95ee\u9898\u6269\u5c55\u6210\u591a\u7ef4\u6570\u7ec4\u7684\u8bdd\u6211\u4eec\u8be5\u600e\u4e48\u505a\uff0c\u8fd9\u5f88\u91cd\u8981\u3002 \u56de\u987e\u4e00\u4e0b\uff0c\u5728 Chapter 2 \u6211\u4eec\u8bf4\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u6574\u578b\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6574\u578b\u6307\u9488\u6307\u5411\u8fd9\u4e2a\u6570\u7ec4\uff1a int *ptr; ptr = &my_array[0]; /* point our pointer at the first integer in our array */ \u5c31\u50cf\u6211\u4eec\u58f0\u660e\u7684\u90a3\u6837\uff0c\u6307\u9488\u7684\u7c7b\u578b\u5fc5\u987b\u548c\u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u4e00\u6837\u3002 \u6b64\u5916\uff0c\u6211\u4eec\u53ef\u4ee5\u8bbe\u8ba1\u4e00\u4e2a\u5904\u7406\u6570\u7ec4\u7684\u51fd\u6570\uff0c\u7528\u6307\u9488\u4f5c\u4e3a\u5f62\u53c2\u3002\u5982\u8fd9\u6837\uff1a int array[3] = {'1', '5', '7'}; void a_func(int *p); \u6709\u7684\u53c2\u6570\u53ef\u80fd\u4f1a\u5199\u6210\u8fd9\u6837\uff1a void a_func(int p[]); \u8fd9\u4f1a\u544a\u8bc9\u522b\u4eba\u8fd9\u4e2a\u51fd\u6570\u662f\u7528\u6765\u5904\u7406\u6570\u7ec4\u7684\u5143\u7d20\u3002\u5f53\u7136\uff0c\u4e0d\u7ba1\u54ea\u79cd\u60c5\u51b5\u4f20\u8fc7\u53bb\u7684\u90fd\u662f\u6307\u5411\u6570\u7ec4\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u6307\u9488\uff0c\u548c\u5728\u51fd\u6570\u539f\u578b\u6216\u8005\u5b9a\u4e49\u4e2d\u4f7f\u7528\u54ea\u79cd\u7b26\u53f7\u65e0\u5173\uff08 int *p \u6216\u8005 int p[] \uff09\u3002\u9700\u8981\u6ce8\u610f\u5230\u7684\u662f\uff0c\u5982\u679c\u6211\u4eec\u7528\u4e86\u6570\u7ec4\u7b26\u53f7\uff0c\u5e76\u4e0d\u9700\u8981\u5c06\u4f20\u9012\u6570\u7ec4\u7684\u5b9e\u9645\u5927\u5c0f\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u662f\u8981\u4f20\u9012\u6574\u4e2a\u6570\u7ec4\uff0c\u53ea\u662f\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5730\u5740\u3002 \u6211\u4eec\u73b0\u5728\u5c06\u95ee\u9898\u8f6c\u5411\u4e8c\u7ef4\u6570\u7ec4\u3002\u5c31\u50cf\u6211\u4eec\u4e0a\u4e00\u7ae0\u8bf4\u7684\u90a3\u6837\uff0cC \u4f1a\u628a\u4e8c\u7ef4\u6570\u7ec4\u89e3\u91ca\u4e3a\u4e00\u7ef4\u6570\u7ec4\u7684\u6570\u7ec4\u3002\u5728\u90a3\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u4e8c\u7ef4\u6574\u578b\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a\u4e00\u7ef4\u6574\u578b\u6570\u7ec4\u3002\u5e76\u4e14\uff0c\u6307\u5411\u4e8c\u7ef4\u6570\u7ec4\u7684\u6307\u9488\u5fc5\u987b\u662f\u8fd9\u79cd\u6570\u636e\u7c7b\u578b\u3002\u5b9e\u73b0\u8fd9\u4e2a\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528\u5173\u952e\u5b57 \u201ctypedef\u201d\uff0c\u5b83\u4f1a\u7ed9\u6307\u5b9a\u7684\u6570\u636e\u7c7b\u578b\u5206\u914d\u4e00\u4e2a\u65b0\u540d\u5b57\u3002\u5982\uff1a typedef unsigned char byte; \u56e0\u4e3a byte \u5c31\u662f unsigned char \uff0c\u56e0\u6b64\uff1a byte b[10]; //\u4f1a\u662f\u4e00\u4e2aunsigned characters\u7c7b\u578b\u7684\u6570\u7ec4 \u6ce8\u610f\u5230\uff0c\u5728 typedef \u58f0\u660e\u4e2d\uff0c byte \u53d6\u4ee3\u4e86\u6211\u4eec\u6b63\u5e38\u4f7f\u7528\u7684 unsigned char \u3002\u53ef\u4ee5\u770b\u51fa\uff0ctypedef \u7684\u4f7f\u7528\u89c4\u5219\u662f\uff0c\u8fd9\u4e2a\u6570\u636e\u7c7b\u578b\u7684\u65b0\u540d\u5b57\u5c31\u662f\u5728\u8fd9\u4e2a\u6570\u636e\u7c7b\u578b\u5b9a\u4e49\u4e2d\u7528\u7684\u540d\u5b57\u3002\u56e0\u6b64\uff0c\u5728\uff1a typedef int Array[10]; Array \u6210\u4e86\u5305\u542b10\u4e2a\u6574\u6570\u7684\u6570\u7ec4\u7c7b\u578b\uff0c\u5982 Array my_arr; \u58f0\u660e\u4e86\u53d8\u91cf my_arr \uff0c\u5b83\u662f\u4e00\u4e2a\u542b\u6709 10 \u4e2a\u6574\u6570\u7a7a\u95f4\u7684\u6570\u7ec4\uff1b\u8fd8\u6709 Array arr2d[5]; \uff0c\u5b83\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u542b\u6709 5 \u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u5143\u7d20\u662f\u4e00\u4e2a 10 \u4e2a\u6574\u6570\u7684\u6570\u7ec4\u3002 \u53e6\u5916\uff0c\u6ce8\u610f\u5230 Array *p1d; \u4f1a\u58f0\u660e\u4e00\u4e2a\u6307\u5411 10 \u4e2a\u6574\u6570\u7684\u6570\u7ec4\u7684\u6307\u9488\u3002\u56e0\u4e3a p1d \u6307\u5411\u7684\u7c7b\u578b\u548c arr2d \u76f8\u540c\uff0c\u6240\u4ee5\u628a\u4e8c\u7ef4\u6570\u7ec4 arr2d \u7684\u5730\u5740\u8d4b\u7ed9\u6307\u5411\u5305\u542b 10 \u4e2a\u6574\u6570\u7684\u4e00\u7ef4\u6570\u7ec4\u7684\u6307\u9488 p1d \u662f\u53ef\u4ee5\u63a5\u53d7\u7684\u3002\u5373 p1d = &arr2d[0]; \u6216\u8005 p1d = arr2d; \u90fd\u662f\u6b63\u786e\u7684\u3002 \u65e2\u7136\u6211\u4eec\u4f7f\u7528\u7684\u6307\u9488\u7684\u7c7b\u578b\u662f 10 \u4e2a\u6574\u6570\u7684\u6570\u7ec4\uff0c\u6211\u4eec\u671f\u671b p1d+1 \u4f1a\u589e\u52a0 10*sizeof(int) \uff0c\u5b83\u786e\u5b9e\u662f\u8fd9\u6837\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c sizeof(*p1d) \u5c31\u662f 20\u3002\u4f60\u53ef\u4ee5\u5199\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\u9a8c\u8bc1\u4e00\u4e0b\u3002 \u5f53\u4f7f\u7528 typedef \u7684\u65f6\u5019\uff0c\u8bfb\u8005\u8bfb\u8d77\u6765\u4f1a\u5f88\u6e05\u6670\uff0c\u7a0b\u5e8f\u5458\u4e5f\u4f1a\u5f88\u65b9\u4fbf\uff0c\u4f46\u5b83\u5374\u4e0d\u662f\u5fc5\u987b\u7684\u3002\u6211\u4eec\u9700\u8981\u4e0d\u4f7f\u7528 typedef \u5173\u952e\u5b57\u6765\u58f0\u660e\u4e00\u4e2a\u50cf p1d \u8fd9\u6837\u7684\u6307\u9488\u3002\u4e8b\u5b9e\u8bc1\u660e\u786e\u5b9e\u53ef\u4ee5\uff0c\u8fd9\u6837\uff1a int (*p1d)[10]; \u5c31\u662f\u6b63\u786e\u7684\u505a\u6cd5\u3002\u8fd9\u91cc p1d \u5c31\u662f\u4e00\u4e2a\u6307\u5411 10 \u4e2a\u6574\u6570\u7684\u6570\u7ec4\u7684\u6307\u9488\uff0c\u548c\u4e0a\u9762\u4f7f\u7528 Array \u58f0\u660e\u7684\u4e00\u6837\u3002\u4f46\u8bf7\u6ce8\u610f\uff0c\u8fd9\u4e2a\uff1a int *p1d[10]; \u662f\u4e0d\u4e00\u6837\u7684\uff0c\u8fd9\u4e2a p1d \u662f\u542b\u6709 10 \u4e2a int \u7c7b\u4f3c\u6307\u9488\u7684\u6570\u7ec4\u540d\u3002","title":"Chapter8 \u6307\u5411\u6570\u7ec4\u7684\u6307\u9488"},{"location":"chapter9/","text":"\u6709\u4e9b\u65f6\u5019\uff0c\u5728\u8fd0\u884c\u65f6\u7528 malloc() \u3001 calloc() \u6216\u8005\u5176\u4ed6\u5206\u914d\u5185\u5b58\u7684\u51fd\u6570\u6765\u5206\u914d\u5185\u5b58\u662f\u5f88\u65b9\u4fbf\u7684\u3002\u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\u4e0d\u7528\u4e8b\u5148\u5c31\u7ed9\u51fa\u5b58\u50a8\u4e00\u4e2a\u6570\u7ec4\u6240\u9700\u5185\u5b58\u5757\u7684\u5927\u5c0f\u4fe1\u606f\uff0c\u76f4\u5230\u8fd0\u884c\u7684\u65f6\u5019\u3002\u6216\u8005\uff0c\u5b83\u53ef\u4ee5\u5141\u8bb8\u4f60\u5728\u4e00\u4e2a\u65f6\u95f4\u70b9\u4f7f\u7528\u8fd9\u90e8\u5206\u5185\u5b58\u53bb\u5b58\u50a8\u4e00\u4e2a\u6574\u578b\u6570\u7ec4\uff0c\u800c\u5f53\u4f60\u4e0d\u518d\u4f7f\u7528\u5b83\u7684\u65f6\u5019\u53ef\u4ee5\u91ca\u653e\u5b83\u7ed9\u522b\u7684\u4ee3\u7801\u4f7f\u7528\uff0c\u4f8b\u5982\u518d\u53bb\u5b58\u50a8\u4e00\u4e2a\u7ed3\u6784\u4f53\u3002 \u5f53\u5185\u5b58\u88ab\u5206\u914d\u7684\u65f6\u5019\uff0c\u5206\u914d\u51fd\u6570\uff08\u5982 malloc() , calloc() \u7b49\uff09\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6307\u9488\uff0c\u5b83\u7684\u7c7b\u578b\u53d6\u51b3\u4e8e\u4f60\u662f\u5728\u7528 K&R \u7f16\u8bd1\u5668\uff0c\u8fd8\u662f\u65b0\u7684 ANSI \u7c7b\u578b\u7f16\u8bd1\u5668\u3002\u5728\u8001\u7684\u7f16\u8bd1\u5668\u4e2d\u4f1a\u8fd4\u56de char \u7c7b\u578b\u6307\u9488\uff0c\u800c ANSI \u7f16\u8bd1\u5668\u5219\u662f void \u3002 \u5982\u679c\u4f60\u4f7f\u7528\u8001\u7684\u7f16\u8bd1\u5668\uff0c\u5e76\u8981\u7ed9\u6574\u578b\u6570\u7ec4\u5206\u914d\u7a7a\u95f4\uff0c\u90a3\u4f60\u5fc5\u987b\u628a char \u6307\u9488\u5f3a\u5236\u8f6c\u6362\u4e3a int \u6307\u9488\u3002\u5982\u4e3a 10 \u4e2a\u6574\u6570\u5206\u914d\u7a7a\u95f4\uff1a int *iptr; iptr = (int *)malloc(10 * sizeof(int)); if (iptr == NULL) { .. ERROR ROUTINE GOES HERE .. } \u800c\u5982\u679c\u4f60\u7528\u7684\u662f\u7b26\u5408 ANSI \u7684\u7f16\u8bd1\u5668\uff0c malloc() \u8fd4\u56de void \u6307\u9488\u3002\u4f46 void \u6307\u9488\u662f\u53ef\u4ee5\u8d4b\u503c\u7ed9\u4efb\u4f55\u7c7b\u578b\u7684\u6307\u9488\u53d8\u91cf\u7684\uff0c\u56e0\u6b64\u4f60\u4e0d\u518d\u9700\u8981\u50cf\u4e0a\u9762\u90a3\u6837\u663e\u5f0f\u7c7b\u578b\u8f6c\u6362\u3002\u6570\u7ec4\u7684\u5927\u5c0f\u4f1a\u5728\u8fd0\u884c\u65f6\u8ba1\u7b97\uff0c\u800c\u5728\u7f16\u8bd1\u65f6\u662f\u4e0d\u9700\u8981\u7684\u3002\u6240\u4ee5\u4e0a\u9762\u7684 10 \u53ef\u4ee5\u662f\u4e00\u4e2a\u4ece\u6570\u636e\u6587\u4ef6\u6216\u8005\u952e\u76d8\u8bfb\u5230\u7684\u53d8\u91cf\uff0c\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u6839\u636e\u9700\u8981\u8ba1\u7b97\u5f97\u5230\u3002 \u7531\u4e8e\u6570\u7ec4\u7b26\u53f7\u548c\u6307\u9488\u7b26\u53f7\u7684\u7b49\u4ef7\uff0c iptr \u50cf\u4e0a\u9762\u90a3\u6837\u88ab\u8d4b\u503c\u4e4b\u540e\uff0c\u4f60\u662f\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u7b26\u53f7\u7684\u3002\u4f8b\u5982\u4f60\u53ef\u4ee5\u8fd9\u6837\u5199\uff1a int k; for (k = 0; k < 10; k++) iptr[k] = 2; \u6765\u628a\u6240\u6709\u5143\u7d20\u90fd\u8bbe\u7f6e\u4e3a 2\u3002 \u5373\u4f7f\u5bf9\u6307\u9488\u548c\u6570\u7ec4\u6709\u4e86\u76f8\u5f53\u597d\u7684\u7406\u89e3\uff0c\u4e00\u4e9b\u521d\u5b66\u8005\u4e5f\u53ef\u80fd\u4e00\u5f00\u59cb\u5bf9\u591a\u7ef4\u6570\u7ec4\u7684\u52a8\u6001\u5206\u914d\u611f\u5230\u56f0\u60d1\u3002\u4e00\u822c\u800c\u8a00\uff0c\u6211\u4eec\u60f3\u8981\u901a\u8fc7\u6570\u7ec4\u7b26\u53f7\u8bbf\u95ee\u8fd9\u79cd\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u800c\u4e0d\u662f\u6307\u9488\u7b26\u53f7\uff0c\u4e0d\u7ba1\u600e\u6837\u3002\u6839\u636e\u5e94\u7528\u7684\u4e0d\u540c\uff0c\u6211\u4eec\u5728\u8fd0\u884c\u65f6\u53ef\u80fd\u77e5\u9053\u4e5f\u53ef\u80fd\u4e0d\u77e5\u9053\u6570\u7ec4\u7684\u5927\u5c0f\u3002\u8fd9\u5c31\u8ba9\u6211\u4eec\u6709\u4e0d\u540c\u7684\u65b9\u5f0f\u5b8c\u6210\u6211\u4eec\u7684\u4efb\u52a1\u3002 \u5c31\u50cf\u6211\u4eec\u770b\u5230\u7684\uff0c\u5728\u52a8\u6001\u5206\u914d\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\u7684\u65f6\u5019\uff0c\u5b83\u7684\u5927\u5c0f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u8ba1\u7b97\u5230\u3002\u800c\u52a8\u6001\u5206\u914d\u591a\u7ef4\u6570\u7ec4\u65f6\uff0c\u7f16\u8bd1\u65f6\u6211\u4eec\u4e0d\u518d\u9700\u8981\u77e5\u9053\u7b2c\u4e00\u7ef4\u3002\u662f\u5426\u9700\u8981\u77e5\u9053\u9ad8\u7ef4\uff0c\u8fd9\u8981\u770b\u4f60\u5199\u7684\u4ee3\u7801\u4e86\u3002\u8fd9\u91cc\u6211\u4eec\u5c06\u8ba8\u8bba\u4e00\u4e0b\u52a8\u6001\u5206\u914d\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4\u7684\u4e0d\u540c\u65b9\u6cd5\u3002 \u9996\u5148\u6211\u4eec\u5148\u8003\u8651\u5728\u7f16\u8bd1\u65f6\u7b2c\u4e8c\u7ef4\u5df2\u77e5\u7684\u60c5\u51b5\u3002 \u65b9\u6cd5 1 \u00b6 \u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 typedef \u5173\u952e\u5b57\u3002\u4e3a\u4e86\u5206\u914d\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u5e94\u8be5\u60f3\u8d77\u4e0b\u9762 2 \u79cd\u5199\u6cd5\u80fd\u751f\u6210\u76f8\u540c\u7684\u76ee\u6807\u4ee3\u7801\uff1a multi[row][col] = 1; *(*(multi + row) + col) = 1; \u4e0b\u9762 2 \u4e2d\u5199\u6cd5\u4e5f\u80fd\u751f\u6210\u540c\u6837\u7684\u4ee3\u7801\uff1a multi[row]; *(multi + row); \u65e2\u7136\u53f3\u8fb9\u7684\u90a3\u4e2a\u4f1a\u8ba1\u7b97\u6210\u6307\u9488\uff0c\u90a3\u4e48\u5de6\u8fb9\u7684\u6570\u7ec4\u7b26\u53f7\u4e5f\u4f1a\u8ba1\u7b97\u6210\u6307\u9488\u3002\u4e8b\u5b9e\u4e0a\uff0c multi[0] \u4f1a\u8fd4\u56de\u7b2c\u4e00\u884c\u7b2c\u4e00\u4e2a\u6570\u7684\u5730\u5740\uff0c multi[1] \u5f97\u5230\u7b2c\u4e8c\u884c\u7b2c\u4e00\u4e2a\u6570\u7684\u5730\u5740\uff0c\u7b49\u7b49\u3002\u5b9e\u9645\u4e0a\uff0c multi[n] \u8ba1\u7b97\u6574\u578b\u6570\u7ec4\u7684\u6307\u9488\uff0c\u5373\u4e8c\u7ef4\u6570\u7ec4\u7684\u7b2cn\u884c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c multi \u53ef\u4ee5\u770b\u6210\u6570\u7ec4\u7684\u6570\u7ec4\uff0c multi[n] \u5219\u662f\u8fd9\u4e2a\u6570\u7ec4\u7684\u6570\u7ec4\u7684\u7b2cn\u4e2a\u6570\u7ec4\u7684\u6307\u9488\u3002\u8fd9\u91cc\u7684 \u6307\u9488 \u8fd9\u4e2a\u8bcd\u4ee3\u8868\u7684\u662f\u5730\u5740\u503c\uff08\u4e0d\u662f\u6211\u4eec\u901a\u5e38\u8bf4\u7684\u6307\u9488\uff09\u3002\u7136\u800c\u8fd9\u5728\u6587\u732e\u4e2d\u5341\u5206\u5e38\u89c1\uff0c\u6240\u4ee5\u5f53\u4f60\u8bfb\u5230\u8fd9\u6837\u7684\u8bed\u53e5\u65f6\u8981\u6ce8\u610f\u533a\u5206\u5b83\u5230\u5e95\u662f\u6570\u7ec4\u7684\u5e38\u91cf\u5730\u5740\u8fd8\u662f\u4e00\u4e2a\u6307\u9488\u53d8\u91cf\uff08\u6307\u9488\u53d8\u91cf\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61\uff09\u3002 \u770b\u770b\u8fd9\u4e2a\u7a0b\u5e8f\uff1a --------------- Program 9.1 -------------------------------- /* Program 9.1 from PTRTUT10.HTM 6/13/97 */ #include <stdio.h> #include <stdlib.h> #define COLS 5 typedef int RowArray[COLS]; RowArray *rptr; int main(void) { int nrows = 10; int row, col; rptr = malloc(nrows * COLS * sizeof(int)); for (row = 0; row < nrows; row++) { for (col = 0; col < COLS; col++) { rptr[row][col] = 17; } } return 0; } ------------- End of Prog. 9.1 -------------------------------- \u8fd9\u91cc\u5047\u8bbe\u7528\u7684 ANSI \u7c7b\u578b\u7684\u7f16\u8bd1\u5668\uff0c\u6240\u4ee5 malloc() \u8fd4\u56de\u7684 void \u6307\u9488\u4e0d\u5fc5\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u3002\u5982\u679c\u4f60\u7528\u7684\u662f K&R \u7f16\u8bd1\u5668\uff0c\u4f60\u9700\u8981\u8fd9\u6837\u5199\uff1a rptr = (RowArray *)malloc(.... etc. \u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c rptr \u5c31\u6709\u4e86\u4e00\u4e2a\u6570\u7ec4\u540d\u7684\u6240\u6709\u7279\u5f81\u503c\uff08\u9664\u4e86 rptr \u662f\u53ef\u4ee5\u6539\u53d8\u7684\uff09\uff0c\u5e76\u4e14\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u5168\u90fd\u4f7f\u7528\u6570\u7ec4\u7b26\u53f7\u3002\u4e5f\u5c31\u610f\u5473\u7740\uff0c\u5982\u679c\u4f60\u8981\u5199\u4e00\u4e2a\u51fd\u6570\u53bb\u4fee\u6539\u6570\u7ec4\u4e2d\u7684\u5185\u5bb9\uff0c\u4f60\u5fc5\u987b\u8981\u5728\u51fd\u6570\u7684\u5f62\u53c2\u4e2d\u4f7f\u7528 COLS\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u8ba8\u8bba\u4f20\u9012\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7ed9\u51fd\u6570\u65f6\u505a\u7684\u90a3\u6837\u3002 \u65b9\u6cd5 2 \u00b6 \u5728\u4e0a\u9762\u7684\u65b9\u6cd5 1 \u4e2d\uff0c rptr \u662f\u4e00\u4e2a\u6307\u5411\u201c\u6709 COLS \u4e2a\u6574\u6570\u7684\u4e00\u7ef4\u6570\u7ec4\u7c7b\u578b\u201d\u7684\u6307\u9488\u3002\u5df2\u7ecf\u77e5\u9053\u6709\u4e00\u79cd\u8bed\u6cd5\u53ef\u4ee5\u4e0d\u4f7f\u7528 typedef \u800c\u5b9a\u4e49\u8fd9\u79cd\u7c7b\u578b\u7684\u6307\u9488\u3002\u8fd9\u6837\u5199\uff1a int (*xptr)[COLS]; \u53d8\u91cf xptr \u62e5\u6709\u6240\u6709\u548c\u65b9\u6cd5 1 \u4e2d\u4e00\u6837\u7684\u7279\u5f81\u503c\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u4f7f\u7528 typedef \u3002\u8fd9\u91cc\u7684 xptr \u6307\u9488\uff0c\u5b83\u6307\u5411\u4e00\u4e2a\u6574\u578b\u6570\u7ec4\uff0c\u5e76\u4e14\u6570\u7ec4\u7684\u5927\u5c0f\u901a\u8fc7 #defined COLS \u5b9a\u4e49\u3002\u90a3\u4e2a\u62ec\u53f7\u8ba9\u6307\u9488\u7b26\u53f7\u6709\u4e86\u9ad8\u4f18\u5148\u7ea7\uff0c\u5c3d\u7ba1\u539f\u6765\u6570\u7ec4\u7b26\u53f7\u6bd4\u6307\u9488\u7b26\u53f7\u4f18\u5148\u7ea7\u9ad8\u3002\u4f46\u5982\u679c\u8fd9\u6837\u5199\uff1a int *xptr[COLS]; \u90a3\u6211\u4eec\u53ea\u662f\u5b9a\u4e49\u4e86 xptr \u6570\u7ec4\uff0c\u8fd9\u4e2a\u6570\u7ec4\u5b58\u653e\u6307\u9488\uff0c\u5927\u5c0f\u4e3a\u901a\u8fc7 #defined \u5b9a\u4e49\u7684 COLS\u3002\u4ed6\u4eec\u6839\u672c\u662f\u4e0d\u4e00\u6837\u7684\u3002\u7136\u800c\u6307\u9488\u6570\u7ec4\u5728\u52a8\u6001\u5206\u914d\u4e8c\u7ef4\u6570\u7ec4\u4e5f\u662f\u6709\u7528\u7684\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762 2 \u4e2d\u65b9\u6cd5\u4e2d\u770b\u5230\u3002 \u65b9\u6cd5 3 \u00b6 \u8003\u8651\u4e00\u4e0b\u8fd9\u79cd\u60c5\u51b5\uff1a\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u5e76\u4e0d\u77e5\u9053\u6bcf\u4e00\u884c\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u884c\u6570\u548c\u5217\u6570\u90fd\u662f\u5728\u8fd0\u884c\u65f6\u5b9a\u4e49\u7684\u3002\u4e00\u79cd\u65b9\u6cd5\u5c31\u662f\u521b\u5efa\u4e00\u4e2a int \u7c7b\u578b\u7684\u6307\u9488\u6570\u7ec4\uff0c\u7136\u540e\u7ed9\u6bcf\u4e00\u884c\u5206\u914d\u7a7a\u95f4\uff0c\u6700\u540e\u7528\u6307\u9488\u6570\u7ec4\u6307\u5411\u6bcf\u4e00\u884c\u3002\u770b\u770b\u4ee3\u7801: -------------- Program 9.2 ------------------------------------ /* Program 9.2 from PTRTUT10.HTM 6/13/97 */ #include <stdio.h> #include <stdlib.h> int main(void) { int nrows = 5; /* Both nrows and ncols could be evaluated */ int ncols = 10; /* or read in at run time */ int row; int **rowptr; rowptr = malloc(nrows * sizeof(int *)); if (rowptr == NULL) { puts(\"\\nFailure to allocate room for row pointers.\\n\"); exit(0); } printf(\"\\n\\n\\nIndex Pointer(hex) Pointer(dec) Diff.(dec)\"); for (row = 0; row < nrows; row++) { rowptr[row] = malloc(ncols * sizeof(int)); if (rowptr[row] == NULL) { printf(\"\\nFailure to allocate for row[%d]\\n\",row); exit(0); } printf(\"\\n%d %p %d\", row, rowptr[row],rowptr[row]); if (row > 0) printf(\" %d\",(int)(rowptr[row] - rowptr[row-1])); } return 0; } --------------- End 9.2 ------------------------------------ \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c rowptr \u662f\u4e00\u4e2a\u6307\u9488\u7684\u6307\u9488\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5b83\u6307\u5411 int \u6307\u9488\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u60f3\u60f3\u8c03\u7528\u4e86\u591a\u5c11\u6b21 malloc() \uff1a To get the array of pointers 1 call To get space for the rows 5 calls ----- Total 6 calls \u5982\u679c\u4f60\u9009\u62e9\u8fd9\u79cd\u65b9\u6cd5\u7684\u8bdd\uff0c\u9700\u8981\u6ce8\u610f\uff0c\u5c3d\u7ba1\u4f60\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u7b26\u53f7\u6765\u8bbf\u95ee\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u5982 rowptr[row][col] = 17; \uff0c\u4f46\u5b83\u5e76\u4e0d\u610f\u5473\u7740\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5728\u5185\u5b58\u4e2d\u662f\u8fde\u7eed\u7684\u3002 \u4f46\u662f\u4f60\u5374\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u7b26\u53f7\u5c31\u50cf\u5b83\u4eec\u662f\u8fde\u7eed\u7684\u4e00\u6837\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u5199\u65f6\uff1a rowptr[row][col] = 176; rowptr \u5c31\u50cf\u662f\u7f16\u8bd1\u65f6\u521b\u5efa\u7684\u4e8c\u7ef4\u6570\u7ec4\u4e00\u6837\u3002\u5f53\u7136 row \u548c col \u5fc5\u987b\u5728\u4f60\u521b\u5efa\u7684\u6570\u7ec4\u8303\u56f4\u5185\uff0c\u8fd9\u4e5f\u548c\u7f16\u8bd1\u65f6\u521b\u5efa\u7684\u6570\u7ec4\u4e00\u6837\u3002 \u5982\u679c\u4f60\u60f3\u7528\u8fde\u7eed\u7684\u5185\u5b58\u5757\u6765\u5b58\u50a8\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u90a3\u6837\u505a\u3002 \u65b9\u6cd5 4 \u00b6 \u8fd9\u4e2a\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u5148\u5206\u914d\u4e00\u5757\u5185\u5b58\u6765\u5b58\u653e\u6574\u4e2a\u6570\u7ec4\u3002\u7136\u540e\u518d\u521b\u5efa\u6307\u9488\u6570\u7ec4\u6307\u5411\u6bcf\u4e00\u884c\u3002\u56e0\u6b64\uff0c\u5c3d\u7ba1\u6211\u4eec\u4f7f\u7528\u4e86\u6307\u9488\u6570\u7ec4\uff0c\u5b9e\u9645\u5185\u5b58\u4e2d\u7684\u6570\u7ec4\u8fd8\u662f\u8fde\u7eed\u7684\u3002\u4ee3\u7801\u50cf\u662f\u8fd9\u6837\uff1a ----------------- Program 9.3 ----------------------------------- /* Program 9.3 from PTRTUT10.HTM 6/13/97 */ #include <stdio.h> #include <stdlib.h> int main(void) { int **rptr; int *aptr; int *testptr; int k; int nrows = 5; /* Both nrows and ncols could be evaluated */ int ncols = 8; /* or read in at run time */ int row, col; /* we now allocate the memory for the array */ aptr = malloc(nrows * ncols * sizeof(int)); if (aptr == NULL) { puts(\"\\nFailure to allocate room for the array\"); exit(0); } /* next we allocate room for the pointers to the rows */ rptr = malloc(nrows * sizeof(int *)); if (rptr == NULL) { puts(\"\\nFailure to allocate room for pointers\"); exit(0); } /* and now we 'point' the pointers */ for (k = 0; k < nrows; k++) { rptr[k] = aptr + (k * ncols); } /* Now we illustrate how the row pointers are incremented */ printf(\"\\n\\nIllustrating how row pointers are incremented\"); printf(\"\\n\\nIndex Pointer(hex) Diff.(dec)\"); for (row = 0; row < nrows; row++) { printf(\"\\n%d %p\", row, rptr[row]); if (row > 0) printf(\" %d\",(rptr[row] - rptr[row-1])); } printf(\"\\n\\nAnd now we print out the array\\n\"); for (row = 0; row < nrows; row++) { for (col = 0; col < ncols; col++) { rptr[row][col] = row + col; printf(\"%d \", rptr[row][col]); } putchar('\\n'); } puts(\"\\n\"); /* and here we illustrate that we are, in fact, dealing with a 2 dimensional array in a contiguous block of memory. */ printf(\"And now we demonstrate that they are contiguous in memory\\n\"); testptr = aptr; for (row = 0; row < nrows; row++) { for (col = 0; col < ncols; col++) { printf(\"%d \", *(testptr++)); } putchar('\\n'); } return 0; } ------------- End Program 9.3 ----------------- \u5728\u770b\u770b\u6211\u4eec\u8c03\u7528\u4e86\u51e0\u6b21 malloc() \uff1a To get room for the array itself 1 call To get room for the array of ptrs 1 call ---- Total 2 calls \u73b0\u5728\uff0c\u6bcf\u6b21 malloc() \u8c03\u7528\u90fd\u4f1a\u82b1\u8d39\u989d\u5916\u7684\u7a7a\u95f4\u5f00\u9500\uff0c\u56e0\u4e3a malloc() \u901a\u5e38\u90fd\u662f\u88ab\u64cd\u4f5c\u7cfb\u7edf\u6267\u884c\uff0c\u751f\u6210\u4e00\u4e2a\u5305\u542b\u4e0e\u5757\u5927\u5c0f\u6709\u5173\u7684\u6570\u636e\u7684\u94fe\u8868\u3002\u4f46\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5bf9\u4e8e\u5f88\u5927\u7684\u6570\u7ec4\uff08\u6570\u767e\u884c\uff09\u8bb0\u5f55\u4ec0\u4e48\u65f6\u95f4\u9700\u8981\u91ca\u653e\u4ec0\u4e48\u662f\u4e00\u4ef6\u5f88\u9ebb\u70e6\u7684\u4e8b\u3002\u53e6\u5916\uff0c\u8054\u5408\u5728\u4e00\u8d77\u7684\u8fde\u7eed\u6570\u636e\u5757\u53ef\u4ee5\u4f7f\u7528 memset() \u5168\u90e8\u521d\u59cb\u5316\u4e3a 0\uff0c\u8fd9\u6837\u770b\u8d77\u6765\uff0c\u8fd9\u79cd\u65b9\u6cd5\u66f4\u597d\u3002 \u4f5c\u4e3a\u591a\u7ef4\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u793a\u4f8b\uff0c\u6211\u4eec\u5c06\u5c55\u793a\u52a8\u6001\u5206\u914d\u4e00\u4e2a\u4e09\u7ef4\u6570\u7ec4\u3002\u5b83\u8fd8\u4f1a\u7ed9\u4f60\u5c55\u793a\u7684\u662f\u89c2\u5bdf\u8fd9\u79cd\u5206\u914d\u8fc7\u7a0b\u3002\u7531\u4e8e\u8fd9\u4e9b\u539f\u56e0\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u4e0a\u9762\u8bf4\u5230\u7684\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff08\u5206\u914d\u6574\u5757\u5185\u5b58\uff09\u3002\u770b\u770b\u4e0b\u9762\u7684\u4ee3\u7801\uff1a ------------------- Program 9.4 ------------------- /* Program 9.4 from PTRTUT10.HTM 6/13/97 */ #include <stdio.h> #include <stdlib.h> #include <stddef.h> int X_DIM=16; int Y_DIM=5; int Z_DIM=3; int main(void) { char *space; char ***Arr3D; int y, z; ptrdiff_t diff; /* first we set aside space for the array itself */ space = malloc(X_DIM * Y_DIM * Z_DIM * sizeof(char)); /* next we allocate space of an array of pointers, each to eventually point to the first element of a 2 dimensional array of pointers to pointers */ Arr3D = malloc(Z_DIM * sizeof(char **)); /* and for each of these we assign a pointer to a newly allocated array of pointers to a row */ for (z = 0; z < Z_DIM; z++) { Arr3D[z] = malloc(Y_DIM * sizeof(char *)); /* and for each space in this array we put a pointer to the first element of each row in the array space originally allocated */ for (y = 0; y < Y_DIM; y++) { Arr3D[z][y] = space + (z*(X_DIM * Y_DIM) + y*X_DIM); } } /* And, now we check each address in our 3D array to see if the indexing of the Arr3d pointer leads through in a continuous manner */ for (z = 0; z < Z_DIM; z++) { printf(\"Location of array %d is %p\\n\", z, *Arr3D[z]); for ( y = 0; y < Y_DIM; y++) { printf(\" Array %d and Row %d starts at %p\", z, y, Arr3D[z][y]); diff = Arr3D[z][y] - space; printf(\" diff = %d \",diff); printf(\" z = %d y = %d\\n\", z, y); } } return 0; } ------------------- End of Prog. 9.4 ------------------- \u5982\u679c\u4f60\u8ddf\u968f\u6559\u7a0b\u5230\u8fd9\u4e2a\u5730\u65b9\uff0c\u90a3\u5728\u6ce8\u91ca\u7684\u57fa\u7840\u4e0a\u72ec\u81ea\u7406\u89e3\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u5e94\u8be5\u4e0d\u662f\u95ee\u9898\u3002\u7136\u800c\u8fd8\u662f\u6709\u51e0\u4e2a\u70b9\u9700\u8981\u6307\u51fa\u3002\u8ba9\u6211\u4eec\u4ece\u8fd9\u884c\u4ee3\u7801\u5f00\u59cb\uff1a Arr3D[z][y] = space + (z*(X_DIM * Y_DIM) + y*X_DIM); \u6ce8\u610f\u5230\u8fd9\u91cc\u7684 space \u662f\u4e00\u4e2a\u5b57\u7b26\u6307\u9488\uff0c\u548c Arr3D[z][y] \u7684\u7c7b\u578b\u662f\u4e00\u6837\u7684\u3002\u8981\u660e\u767d\u5f53\u7ed9\u6307\u9488\u52a0\u4e0a\u4e00\u4e2a\u6574\u6570,\u5c31\u5982\u8ba1\u7b97 (z*(X_DIM * Y_DIM) + y*X_DIM) \u5f97\u5230\u7684\u6574\u6570\u4e00\u6837\uff0c\u7ed3\u679c\u662f\u4e00\u4e2a\u65b0\u7684\u6307\u9488\u503c\uff0c\u8fd9\u5f88\u91cd\u8981\u3002\u5e76\u4e14\u7ed9\u6307\u9488\u53d8\u91cf\u8d4b\u4e00\u4e2a\u6307\u9488\u503c\u7684\u65f6\u5019\uff0c\u7c7b\u578b\u4e00\u5b9a\u8981\u5339\u914d\u3002","title":"Chapter9 \u6307\u9488\u4e0e\u52a8\u6001\u5206\u914d\u5185\u5b58"},{"location":"chapter9/#Method1","text":"\u5904\u7406\u8fd9\u4e2a\u95ee\u9898\u7684\u4e00\u79cd\u65b9\u6cd5\u662f\u4f7f\u7528 typedef \u5173\u952e\u5b57\u3002\u4e3a\u4e86\u5206\u914d\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4\uff0c\u4f60\u5e94\u8be5\u60f3\u8d77\u4e0b\u9762 2 \u79cd\u5199\u6cd5\u80fd\u751f\u6210\u76f8\u540c\u7684\u76ee\u6807\u4ee3\u7801\uff1a multi[row][col] = 1; *(*(multi + row) + col) = 1; \u4e0b\u9762 2 \u4e2d\u5199\u6cd5\u4e5f\u80fd\u751f\u6210\u540c\u6837\u7684\u4ee3\u7801\uff1a multi[row]; *(multi + row); \u65e2\u7136\u53f3\u8fb9\u7684\u90a3\u4e2a\u4f1a\u8ba1\u7b97\u6210\u6307\u9488\uff0c\u90a3\u4e48\u5de6\u8fb9\u7684\u6570\u7ec4\u7b26\u53f7\u4e5f\u4f1a\u8ba1\u7b97\u6210\u6307\u9488\u3002\u4e8b\u5b9e\u4e0a\uff0c multi[0] \u4f1a\u8fd4\u56de\u7b2c\u4e00\u884c\u7b2c\u4e00\u4e2a\u6570\u7684\u5730\u5740\uff0c multi[1] \u5f97\u5230\u7b2c\u4e8c\u884c\u7b2c\u4e00\u4e2a\u6570\u7684\u5730\u5740\uff0c\u7b49\u7b49\u3002\u5b9e\u9645\u4e0a\uff0c multi[n] \u8ba1\u7b97\u6574\u578b\u6570\u7ec4\u7684\u6307\u9488\uff0c\u5373\u4e8c\u7ef4\u6570\u7ec4\u7684\u7b2cn\u884c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c multi \u53ef\u4ee5\u770b\u6210\u6570\u7ec4\u7684\u6570\u7ec4\uff0c multi[n] \u5219\u662f\u8fd9\u4e2a\u6570\u7ec4\u7684\u6570\u7ec4\u7684\u7b2cn\u4e2a\u6570\u7ec4\u7684\u6307\u9488\u3002\u8fd9\u91cc\u7684 \u6307\u9488 \u8fd9\u4e2a\u8bcd\u4ee3\u8868\u7684\u662f\u5730\u5740\u503c\uff08\u4e0d\u662f\u6211\u4eec\u901a\u5e38\u8bf4\u7684\u6307\u9488\uff09\u3002\u7136\u800c\u8fd9\u5728\u6587\u732e\u4e2d\u5341\u5206\u5e38\u89c1\uff0c\u6240\u4ee5\u5f53\u4f60\u8bfb\u5230\u8fd9\u6837\u7684\u8bed\u53e5\u65f6\u8981\u6ce8\u610f\u533a\u5206\u5b83\u5230\u5e95\u662f\u6570\u7ec4\u7684\u5e38\u91cf\u5730\u5740\u8fd8\u662f\u4e00\u4e2a\u6307\u9488\u53d8\u91cf\uff08\u6307\u9488\u53d8\u91cf\u672c\u8eab\u5c31\u662f\u4e00\u4e2a\u6570\u636e\u5bf9\u8c61\uff09\u3002 \u770b\u770b\u8fd9\u4e2a\u7a0b\u5e8f\uff1a --------------- Program 9.1 -------------------------------- /* Program 9.1 from PTRTUT10.HTM 6/13/97 */ #include <stdio.h> #include <stdlib.h> #define COLS 5 typedef int RowArray[COLS]; RowArray *rptr; int main(void) { int nrows = 10; int row, col; rptr = malloc(nrows * COLS * sizeof(int)); for (row = 0; row < nrows; row++) { for (col = 0; col < COLS; col++) { rptr[row][col] = 17; } } return 0; } ------------- End of Prog. 9.1 -------------------------------- \u8fd9\u91cc\u5047\u8bbe\u7528\u7684 ANSI \u7c7b\u578b\u7684\u7f16\u8bd1\u5668\uff0c\u6240\u4ee5 malloc() \u8fd4\u56de\u7684 void \u6307\u9488\u4e0d\u5fc5\u5f3a\u5236\u7c7b\u578b\u8f6c\u6362\u3002\u5982\u679c\u4f60\u7528\u7684\u662f K&R \u7f16\u8bd1\u5668\uff0c\u4f60\u9700\u8981\u8fd9\u6837\u5199\uff1a rptr = (RowArray *)malloc(.... etc. \u4f7f\u7528\u8fd9\u79cd\u65b9\u6cd5\uff0c rptr \u5c31\u6709\u4e86\u4e00\u4e2a\u6570\u7ec4\u540d\u7684\u6240\u6709\u7279\u5f81\u503c\uff08\u9664\u4e86 rptr \u662f\u53ef\u4ee5\u6539\u53d8\u7684\uff09\uff0c\u5e76\u4e14\u5728\u4e0b\u9762\u7684\u4ee3\u7801\u4e2d\u5168\u90fd\u4f7f\u7528\u6570\u7ec4\u7b26\u53f7\u3002\u4e5f\u5c31\u610f\u5473\u7740\uff0c\u5982\u679c\u4f60\u8981\u5199\u4e00\u4e2a\u51fd\u6570\u53bb\u4fee\u6539\u6570\u7ec4\u4e2d\u7684\u5185\u5bb9\uff0c\u4f60\u5fc5\u987b\u8981\u5728\u51fd\u6570\u7684\u5f62\u53c2\u4e2d\u4f7f\u7528 COLS\uff0c\u5c31\u50cf\u6211\u4eec\u5728\u8ba8\u8bba\u4f20\u9012\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7ed9\u51fd\u6570\u65f6\u505a\u7684\u90a3\u6837\u3002","title":"\u65b9\u6cd5 1"},{"location":"chapter9/#Method2","text":"\u5728\u4e0a\u9762\u7684\u65b9\u6cd5 1 \u4e2d\uff0c rptr \u662f\u4e00\u4e2a\u6307\u5411\u201c\u6709 COLS \u4e2a\u6574\u6570\u7684\u4e00\u7ef4\u6570\u7ec4\u7c7b\u578b\u201d\u7684\u6307\u9488\u3002\u5df2\u7ecf\u77e5\u9053\u6709\u4e00\u79cd\u8bed\u6cd5\u53ef\u4ee5\u4e0d\u4f7f\u7528 typedef \u800c\u5b9a\u4e49\u8fd9\u79cd\u7c7b\u578b\u7684\u6307\u9488\u3002\u8fd9\u6837\u5199\uff1a int (*xptr)[COLS]; \u53d8\u91cf xptr \u62e5\u6709\u6240\u6709\u548c\u65b9\u6cd5 1 \u4e2d\u4e00\u6837\u7684\u7279\u5f81\u503c\uff0c\u5e76\u4e14\u4e0d\u9700\u8981\u4f7f\u7528 typedef \u3002\u8fd9\u91cc\u7684 xptr \u6307\u9488\uff0c\u5b83\u6307\u5411\u4e00\u4e2a\u6574\u578b\u6570\u7ec4\uff0c\u5e76\u4e14\u6570\u7ec4\u7684\u5927\u5c0f\u901a\u8fc7 #defined COLS \u5b9a\u4e49\u3002\u90a3\u4e2a\u62ec\u53f7\u8ba9\u6307\u9488\u7b26\u53f7\u6709\u4e86\u9ad8\u4f18\u5148\u7ea7\uff0c\u5c3d\u7ba1\u539f\u6765\u6570\u7ec4\u7b26\u53f7\u6bd4\u6307\u9488\u7b26\u53f7\u4f18\u5148\u7ea7\u9ad8\u3002\u4f46\u5982\u679c\u8fd9\u6837\u5199\uff1a int *xptr[COLS]; \u90a3\u6211\u4eec\u53ea\u662f\u5b9a\u4e49\u4e86 xptr \u6570\u7ec4\uff0c\u8fd9\u4e2a\u6570\u7ec4\u5b58\u653e\u6307\u9488\uff0c\u5927\u5c0f\u4e3a\u901a\u8fc7 #defined \u5b9a\u4e49\u7684 COLS\u3002\u4ed6\u4eec\u6839\u672c\u662f\u4e0d\u4e00\u6837\u7684\u3002\u7136\u800c\u6307\u9488\u6570\u7ec4\u5728\u52a8\u6001\u5206\u914d\u4e8c\u7ef4\u6570\u7ec4\u4e5f\u662f\u6709\u7528\u7684\uff0c\u6211\u4eec\u5c06\u5728\u4e0b\u9762 2 \u4e2d\u65b9\u6cd5\u4e2d\u770b\u5230\u3002","title":"\u65b9\u6cd5 2"},{"location":"chapter9/#Method3","text":"\u8003\u8651\u4e00\u4e0b\u8fd9\u79cd\u60c5\u51b5\uff1a\u6211\u4eec\u5728\u7f16\u8bd1\u65f6\u5e76\u4e0d\u77e5\u9053\u6bcf\u4e00\u884c\u7684\u5143\u7d20\u4e2a\u6570\uff0c\u4e5f\u5c31\u662f\u884c\u6570\u548c\u5217\u6570\u90fd\u662f\u5728\u8fd0\u884c\u65f6\u5b9a\u4e49\u7684\u3002\u4e00\u79cd\u65b9\u6cd5\u5c31\u662f\u521b\u5efa\u4e00\u4e2a int \u7c7b\u578b\u7684\u6307\u9488\u6570\u7ec4\uff0c\u7136\u540e\u7ed9\u6bcf\u4e00\u884c\u5206\u914d\u7a7a\u95f4\uff0c\u6700\u540e\u7528\u6307\u9488\u6570\u7ec4\u6307\u5411\u6bcf\u4e00\u884c\u3002\u770b\u770b\u4ee3\u7801: -------------- Program 9.2 ------------------------------------ /* Program 9.2 from PTRTUT10.HTM 6/13/97 */ #include <stdio.h> #include <stdlib.h> int main(void) { int nrows = 5; /* Both nrows and ncols could be evaluated */ int ncols = 10; /* or read in at run time */ int row; int **rowptr; rowptr = malloc(nrows * sizeof(int *)); if (rowptr == NULL) { puts(\"\\nFailure to allocate room for row pointers.\\n\"); exit(0); } printf(\"\\n\\n\\nIndex Pointer(hex) Pointer(dec) Diff.(dec)\"); for (row = 0; row < nrows; row++) { rowptr[row] = malloc(ncols * sizeof(int)); if (rowptr[row] == NULL) { printf(\"\\nFailure to allocate for row[%d]\\n\",row); exit(0); } printf(\"\\n%d %p %d\", row, rowptr[row],rowptr[row]); if (row > 0) printf(\" %d\",(int)(rowptr[row] - rowptr[row-1])); } return 0; } --------------- End 9.2 ------------------------------------ \u5728\u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c rowptr \u662f\u4e00\u4e2a\u6307\u9488\u7684\u6307\u9488\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\uff0c\u5b83\u6307\u5411 int \u6307\u9488\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\uff0c\u60f3\u60f3\u8c03\u7528\u4e86\u591a\u5c11\u6b21 malloc() \uff1a To get the array of pointers 1 call To get space for the rows 5 calls ----- Total 6 calls \u5982\u679c\u4f60\u9009\u62e9\u8fd9\u79cd\u65b9\u6cd5\u7684\u8bdd\uff0c\u9700\u8981\u6ce8\u610f\uff0c\u5c3d\u7ba1\u4f60\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u7b26\u53f7\u6765\u8bbf\u95ee\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\uff0c\u5982 rowptr[row][col] = 17; \uff0c\u4f46\u5b83\u5e76\u4e0d\u610f\u5473\u7740\u4e8c\u7ef4\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u5728\u5185\u5b58\u4e2d\u662f\u8fde\u7eed\u7684\u3002 \u4f46\u662f\u4f60\u5374\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u7b26\u53f7\u5c31\u50cf\u5b83\u4eec\u662f\u8fde\u7eed\u7684\u4e00\u6837\u3002\u4f8b\u5982\uff0c\u4f60\u53ef\u4ee5\u8fd9\u6837\u5199\u65f6\uff1a rowptr[row][col] = 176; rowptr \u5c31\u50cf\u662f\u7f16\u8bd1\u65f6\u521b\u5efa\u7684\u4e8c\u7ef4\u6570\u7ec4\u4e00\u6837\u3002\u5f53\u7136 row \u548c col \u5fc5\u987b\u5728\u4f60\u521b\u5efa\u7684\u6570\u7ec4\u8303\u56f4\u5185\uff0c\u8fd9\u4e5f\u548c\u7f16\u8bd1\u65f6\u521b\u5efa\u7684\u6570\u7ec4\u4e00\u6837\u3002 \u5982\u679c\u4f60\u60f3\u7528\u8fde\u7eed\u7684\u5185\u5b58\u5757\u6765\u5b58\u50a8\u6570\u7ec4\u7684\u5143\u7d20\uff0c\u4f60\u53ef\u4ee5\u50cf\u4e0b\u9762\u90a3\u6837\u505a\u3002","title":"\u65b9\u6cd5 3"},{"location":"chapter9/#Method4","text":"\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\uff0c\u6211\u4eec\u5148\u5206\u914d\u4e00\u5757\u5185\u5b58\u6765\u5b58\u653e\u6574\u4e2a\u6570\u7ec4\u3002\u7136\u540e\u518d\u521b\u5efa\u6307\u9488\u6570\u7ec4\u6307\u5411\u6bcf\u4e00\u884c\u3002\u56e0\u6b64\uff0c\u5c3d\u7ba1\u6211\u4eec\u4f7f\u7528\u4e86\u6307\u9488\u6570\u7ec4\uff0c\u5b9e\u9645\u5185\u5b58\u4e2d\u7684\u6570\u7ec4\u8fd8\u662f\u8fde\u7eed\u7684\u3002\u4ee3\u7801\u50cf\u662f\u8fd9\u6837\uff1a ----------------- Program 9.3 ----------------------------------- /* Program 9.3 from PTRTUT10.HTM 6/13/97 */ #include <stdio.h> #include <stdlib.h> int main(void) { int **rptr; int *aptr; int *testptr; int k; int nrows = 5; /* Both nrows and ncols could be evaluated */ int ncols = 8; /* or read in at run time */ int row, col; /* we now allocate the memory for the array */ aptr = malloc(nrows * ncols * sizeof(int)); if (aptr == NULL) { puts(\"\\nFailure to allocate room for the array\"); exit(0); } /* next we allocate room for the pointers to the rows */ rptr = malloc(nrows * sizeof(int *)); if (rptr == NULL) { puts(\"\\nFailure to allocate room for pointers\"); exit(0); } /* and now we 'point' the pointers */ for (k = 0; k < nrows; k++) { rptr[k] = aptr + (k * ncols); } /* Now we illustrate how the row pointers are incremented */ printf(\"\\n\\nIllustrating how row pointers are incremented\"); printf(\"\\n\\nIndex Pointer(hex) Diff.(dec)\"); for (row = 0; row < nrows; row++) { printf(\"\\n%d %p\", row, rptr[row]); if (row > 0) printf(\" %d\",(rptr[row] - rptr[row-1])); } printf(\"\\n\\nAnd now we print out the array\\n\"); for (row = 0; row < nrows; row++) { for (col = 0; col < ncols; col++) { rptr[row][col] = row + col; printf(\"%d \", rptr[row][col]); } putchar('\\n'); } puts(\"\\n\"); /* and here we illustrate that we are, in fact, dealing with a 2 dimensional array in a contiguous block of memory. */ printf(\"And now we demonstrate that they are contiguous in memory\\n\"); testptr = aptr; for (row = 0; row < nrows; row++) { for (col = 0; col < ncols; col++) { printf(\"%d \", *(testptr++)); } putchar('\\n'); } return 0; } ------------- End Program 9.3 ----------------- \u5728\u770b\u770b\u6211\u4eec\u8c03\u7528\u4e86\u51e0\u6b21 malloc() \uff1a To get room for the array itself 1 call To get room for the array of ptrs 1 call ---- Total 2 calls \u73b0\u5728\uff0c\u6bcf\u6b21 malloc() \u8c03\u7528\u90fd\u4f1a\u82b1\u8d39\u989d\u5916\u7684\u7a7a\u95f4\u5f00\u9500\uff0c\u56e0\u4e3a malloc() \u901a\u5e38\u90fd\u662f\u88ab\u64cd\u4f5c\u7cfb\u7edf\u6267\u884c\uff0c\u751f\u6210\u4e00\u4e2a\u5305\u542b\u4e0e\u5757\u5927\u5c0f\u6709\u5173\u7684\u6570\u636e\u7684\u94fe\u8868\u3002\u4f46\u66f4\u91cd\u8981\u7684\u662f\uff0c\u5bf9\u4e8e\u5f88\u5927\u7684\u6570\u7ec4\uff08\u6570\u767e\u884c\uff09\u8bb0\u5f55\u4ec0\u4e48\u65f6\u95f4\u9700\u8981\u91ca\u653e\u4ec0\u4e48\u662f\u4e00\u4ef6\u5f88\u9ebb\u70e6\u7684\u4e8b\u3002\u53e6\u5916\uff0c\u8054\u5408\u5728\u4e00\u8d77\u7684\u8fde\u7eed\u6570\u636e\u5757\u53ef\u4ee5\u4f7f\u7528 memset() \u5168\u90e8\u521d\u59cb\u5316\u4e3a 0\uff0c\u8fd9\u6837\u770b\u8d77\u6765\uff0c\u8fd9\u79cd\u65b9\u6cd5\u66f4\u597d\u3002 \u4f5c\u4e3a\u591a\u7ef4\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u793a\u4f8b\uff0c\u6211\u4eec\u5c06\u5c55\u793a\u52a8\u6001\u5206\u914d\u4e00\u4e2a\u4e09\u7ef4\u6570\u7ec4\u3002\u5b83\u8fd8\u4f1a\u7ed9\u4f60\u5c55\u793a\u7684\u662f\u89c2\u5bdf\u8fd9\u79cd\u5206\u914d\u8fc7\u7a0b\u3002\u7531\u4e8e\u8fd9\u4e9b\u539f\u56e0\uff0c\u6211\u4eec\u4f1a\u4f7f\u7528\u4e0a\u9762\u8bf4\u5230\u7684\u7b2c\u4e8c\u79cd\u65b9\u6cd5\uff08\u5206\u914d\u6574\u5757\u5185\u5b58\uff09\u3002\u770b\u770b\u4e0b\u9762\u7684\u4ee3\u7801\uff1a ------------------- Program 9.4 ------------------- /* Program 9.4 from PTRTUT10.HTM 6/13/97 */ #include <stdio.h> #include <stdlib.h> #include <stddef.h> int X_DIM=16; int Y_DIM=5; int Z_DIM=3; int main(void) { char *space; char ***Arr3D; int y, z; ptrdiff_t diff; /* first we set aside space for the array itself */ space = malloc(X_DIM * Y_DIM * Z_DIM * sizeof(char)); /* next we allocate space of an array of pointers, each to eventually point to the first element of a 2 dimensional array of pointers to pointers */ Arr3D = malloc(Z_DIM * sizeof(char **)); /* and for each of these we assign a pointer to a newly allocated array of pointers to a row */ for (z = 0; z < Z_DIM; z++) { Arr3D[z] = malloc(Y_DIM * sizeof(char *)); /* and for each space in this array we put a pointer to the first element of each row in the array space originally allocated */ for (y = 0; y < Y_DIM; y++) { Arr3D[z][y] = space + (z*(X_DIM * Y_DIM) + y*X_DIM); } } /* And, now we check each address in our 3D array to see if the indexing of the Arr3d pointer leads through in a continuous manner */ for (z = 0; z < Z_DIM; z++) { printf(\"Location of array %d is %p\\n\", z, *Arr3D[z]); for ( y = 0; y < Y_DIM; y++) { printf(\" Array %d and Row %d starts at %p\", z, y, Arr3D[z][y]); diff = Arr3D[z][y] - space; printf(\" diff = %d \",diff); printf(\" z = %d y = %d\\n\", z, y); } } return 0; } ------------------- End of Prog. 9.4 ------------------- \u5982\u679c\u4f60\u8ddf\u968f\u6559\u7a0b\u5230\u8fd9\u4e2a\u5730\u65b9\uff0c\u90a3\u5728\u6ce8\u91ca\u7684\u57fa\u7840\u4e0a\u72ec\u81ea\u7406\u89e3\u4e0a\u9762\u8fd9\u6bb5\u4ee3\u7801\u5e94\u8be5\u4e0d\u662f\u95ee\u9898\u3002\u7136\u800c\u8fd8\u662f\u6709\u51e0\u4e2a\u70b9\u9700\u8981\u6307\u51fa\u3002\u8ba9\u6211\u4eec\u4ece\u8fd9\u884c\u4ee3\u7801\u5f00\u59cb\uff1a Arr3D[z][y] = space + (z*(X_DIM * Y_DIM) + y*X_DIM); \u6ce8\u610f\u5230\u8fd9\u91cc\u7684 space \u662f\u4e00\u4e2a\u5b57\u7b26\u6307\u9488\uff0c\u548c Arr3D[z][y] \u7684\u7c7b\u578b\u662f\u4e00\u6837\u7684\u3002\u8981\u660e\u767d\u5f53\u7ed9\u6307\u9488\u52a0\u4e0a\u4e00\u4e2a\u6574\u6570,\u5c31\u5982\u8ba1\u7b97 (z*(X_DIM * Y_DIM) + y*X_DIM) \u5f97\u5230\u7684\u6574\u6570\u4e00\u6837\uff0c\u7ed3\u679c\u662f\u4e00\u4e2a\u65b0\u7684\u6307\u9488\u503c\uff0c\u8fd9\u5f88\u91cd\u8981\u3002\u5e76\u4e14\u7ed9\u6307\u9488\u53d8\u91cf\u8d4b\u4e00\u4e2a\u6307\u9488\u503c\u7684\u65f6\u5019\uff0c\u7c7b\u578b\u4e00\u5b9a\u8981\u5339\u914d\u3002","title":"\u65b9\u6cd5 4"},{"location":"epilog/","text":"\u5b8c\u6210\u4e86\u8fd9\u4e2a\u7ed9\u521d\u5b66\u8005\u4ecb\u7ecd\u6307\u9488\u7684\u6750\u6599\u3002\u5728 C \u91cc\uff0c\u7406\u89e3\u6307\u9488\u6709\u5f88\u591a\u65b9\u6cd5\uff0c\u4f46\u6700\u5177\u9002\u5e94\u6027\u7684\u5c31\u662f\u5199\u4ee3\u7801\u4e86\u3002\u524d\u9762\u8bf4\u7684\u8fd9\u4e9b\u653e\u5728\u4e86 ptr_help.txt \u4e2d\uff0c\u4f60\u53ef\u4ee5\u5728 Bob Stout \u4ee5\u524d\u7248\u672c\u7684 C \u4ee3\u7801\u96c6 SNIPPETS \u91cc\u9762\u627e\u5230\u5b83\u3002\u8fd9\u4e2a\u7248\u672c\u7684\u5185\u5bb9\u5df2\u5728 PTRTUTOT.ZIP \u4e2d\u66f4\u65b0\uff0c\u5b83\u5305\u542b\u5728 SNIP9510.ZIP \u4e2d\u3002 \u6211\u5df2\u7ecf\u51c6\u5907\u597d\u63a5\u53d7\u5173\u4e8e\u8fd9\u4efd\u6750\u6599\u4ee5\u53ca\u76f8\u5173\u8bc4\u8bba\u56de\u590d\u7684\u6279\u8bc4\u610f\u89c1\u4e86\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4f60\u6709\u95ee\u9898\u3001\u8bc4\u8bba\u6216\u8005\u6279\u8bc4\u7b49\u6d89\u53ca\u5c55\u73b0\u51fa\u6765\u7684\u6240\u6709\u4e1c\u897f\uff0c\u8bf7\u901a\u8fc7\u6211\u7684\u90ae\u7bb1 tjensen@ix.netcom.com \u8054\u7cfb\u6211\uff0c\u6211\u5c06\u500d\u611f\u6b23\u6170\u3002","title":"\u5c3e\u58f0"},{"location":"introduction/","text":"\u5982\u679c\u4f60\u60f3\u7cbe\u901a\u7528 C \u8bed\u8a00\u5199\u7a0b\u5e8f\uff0c\u90a3\u4e48\u4f60\u5fc5\u987b\u5bf9\u5982\u4f55\u4f7f\u7528\u6307\u9488\u6709\u4e00\u4e2a\u900f\u5f7b\u7684\u4e86\u89e3\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u6307\u9488\u4f3c\u4e4e\u5bf9\u65b0\u624b\u6765\u8bf4\u662f\u4e00\u5757\u7eca\u811a\u77f3\uff0c\u5c24\u5176\u662f\u90a3\u4e9b\u4ece Fortran, Pascal \u6216\u8005 Basic \u7b49\u7f16\u7a0b\u8bed\u8a00\u8f6c\u8fc7\u6765\u7684\u4eba\u3002 \u6211\u5199\u4e0b\u4e86\u8fd9\u4efd\u6750\u6599\u76ee\u7684\u662f\u5e2e\u52a9\u8fd9\u4e9b\u65b0\u624b\u53bb\u7406\u89e3\u6307\u9488\u3002\u4e3a\u4e86\u80fd\u591f\u83b7\u76ca\u6700\u5927\u5316\uff0c\u6211\u89c9\u5f97\u8bfb\u8005\u81ea\u5df1\u53bb\u8fd0\u884c\u6587\u7ae0\u91cc\u5305\u542b\u7684\u5404\u4e2a\u5217\u8868\u7684\u4ee3\u7801\u662f\u5f88\u91cd\u8981\u7684\u3002\u56e0\u6b64\uff0c\u6211\u5c3d\u91cf\u8ba9\u4ee3\u7801\u4fdd\u6301 ANSI \u98ce\u683c\uff0c\u4ee5\u4fbf\u4e8e\u5b83\u4eec\u80fd\u8fd0\u884c\u4e8e\u6240\u6709\u9075\u5faa ANSI \u7684\u7f16\u8bd1\u5668\u3002\u53e6\u5916\uff0c\u6211\u4f1a\u5c3d\u91cf\u8ba9\u4ee3\u7801\u5728\u6587\u7ae0\u91cc\u5355\u72ec\u6210\u5757\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u8bfb\u8005\u7528\u4e00\u4e2a ASCII \u7f16\u8f91\u5668\u5c31\u53ef\u4ee5\u628a\u4ee3\u7801\u62f7\u8d1d\u5230\u65b0\u6587\u4ef6\uff0c\u5e76\u5728\u4f60\u81ea\u5df1\u7684\u7cfb\u7edf\u4e0a\u7f16\u8bd1\u3002\u6211\u5341\u5206\u63a8\u8350\u8bfb\u8005\u8fd9\u6837\u505a\uff0c\u56e0\u4e3a\u5b83\u4f1a\u5e2e\u52a9\u4f60\u7406\u89e3\u8fd9\u4e2a\u6750\u6599\u3002","title":"\u4ecb\u7ecd"},{"location":"preface/","text":"\u8fd9\u4e2a\u6587\u6863\u7684\u76ee\u7684\u662f\u5411C\u8bed\u8a00\u65b0\u624b\u4ecb\u7ecd\u6307\u9488\u3002\u901a\u8fc7\u8fd9\u51e0\u5e74\u542c\u5230\u6216\u8005\u53c2\u4e0e\u5230\u7684\u5173\u4e8eC\u7684\u8ba8\u8bba\u4e2d\uff0c\u5305\u62ec FidoNet \u548c UseNet\uff0c\u6211\u6ce8\u610f\u5230\u5f88\u591aC\u8bed\u8a00\u65b0\u624b\u5f88\u96be\u7406\u89e3\u6307\u9488\u7684\u57fa\u672c\u6982\u5ff5\u3002\u56e0\u6b64\u6211\u8bd5\u7740\u7528\u5305\u542b\u5927\u91cf\u4f8b\u5b50\u7684\u767d\u8bdd\u53bb\u89e3\u91ca\u4ed6\u4eec\u3002 \u8fd9\u4e2a\u6587\u6863\u7684\u7b2c\u4e00\u7248\u653e\u5728\u4e86\u516c\u5171\u57df\uff0c\u548c\u8fd9\u4e2a\u4e00\u6837\u3002Bob Scout \u628a\u5b83\u505a\u6210\u4e00\u4e2a PTR-HELP.TXT \u6587\u4ef6\u653e\u5728\u4e86\u4ed6\u5e7f\u6cdb\u6536\u96c6\u7684 SNIPPETS \u96c6\u91cc\u3002 \u4ece\u539f\u59cb\u76841995\u7248\u672c\u4e4b\u540e\uff0c\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u6211\u6dfb\u52a0\u4e86\u76f8\u5f53\u6570\u91cf\u7684\u6750\u6599\u5e76\u505a\u4e86\u4e00\u4e9b\u7b80\u8981\u7684\u4fee\u6b63\u3002 \u968f\u540e\uff0c1998\u5e74\u5de6\u53f3\u53d1\u6211\u5728\u6211\u7684\u7f51\u7ad9\u4e0a\u5e03\u4e86\u4e00\u4e2aHTML\u7248\u672c\uff1a http://pweb.netcom.com/~tjensen/ptr/cpoint.htm \u5728\u8bb8\u591a\u4eba\u7684\u8981\u6c42\u4e0b\uff0c\u6211\u6700\u7ec8\u653e\u51fa\u4e86PDF\u7248\u672c\u3002\u5b83\u8ddf\u4e0a\u9762\u94fe\u63a5\u4e2d\u7684HTML\u7248\u672c\u662f\u4e00\u6837\u7684\uff0c\u540c\u6837\u53ef\u4ee5\u5728\u8be5\u7f51\u7ad9\u4e2d\u83b7\u53d6\u5230\u3002 \u611f\u8c22 \uff1a \u7531\u4e8e\u5728 FidoNet C Echo\uff0cUseNet Newsgroup comp.lang.c\uff0c\u6216\u8005\u5176\u4ed6\u7f51\u8def\u4e0a\u7684\u8bba\u575b\uff08\u8fd9\u91cc\u4e0d\u518d\u4e00\u4e00\u5217\u51fa\uff09\u8d34\u51fa\u7684\u95ee\u9898\uff0c\u8bb8\u591a\u4eba\u4e0d\u77e5\u4e0d\u89c9\u5730\u8d21\u732e\u4e86\u8fd9\u4efd\u6587\u6863\u3002\u5c24\u5176\u8981\u611f\u8c22 Bob Scout\uff0c\u5f88\u611f\u6fc0\u4ed6\u628a\u7b2c\u4e00\u7248\u7684\u6750\u6599\u653e\u5728\u4e86\u4ed6\u7684 SNIPPETS \u6587\u4ef6\u91cc\u3002 \u5173\u4e8e\u4f5c\u8005 \uff1a Ted Jensen \u662f\u4e00\u4e2a\u9000\u4f11\u7684\u7535\u5b50\u5de5\u7a0b\u5e08\uff0c\u66fe\u7ecf\u5728\u78c1\u8bb0\u5f55\u9886\u57df\u505a\u8fc7\u786c\u4ef6\u8bbe\u8ba1\u4ee5\u53ca\u5176\u7ecf\u7406\u3002\u81ea\u4ece1968\u5e74\u5b66\u4e60\u7ed9\u7528\u4e8e\u5728\u5927\u578b\u673a\u4e0a\u8fd0\u884c\u5b50\u4efb\u52a1\u7684\u7eb8\u5e26\u6253\u5b54\uff0c\u7f16\u7a0b\u4fbf\u6210\u4e3a\u4e86\u4ed6\u65f6\u4e0d\u65f6\u7684\u4e00\u5927\u7231\u597d\u3002\uff08\u8fd9\u79cd\u4e3b\u673a\u62e5\u670964K\u7684\u78c1\u4ecb\u5185\u5b58\uff09 \u4f7f\u7528 \uff1a \u6587\u6863\u91cc\u5305\u542b\u7684\u4e00\u5207\u5185\u5bb9\uff0c\u90fd\u653e\u51fa\u5230\u4e86 Plblic Domain \uff0c \u4efb\u4f55\u4eba \u90fd\u80fd\u62f7\u8d1d\u6216\u8005\u4ee5\u4f60\u4eec\u81ea\u5df1\u613f\u610f\u7684\u65b9\u5f0f\u8d21\u732e\u8fd9\u4efd\u6587\u6863\u3002\u6211\u552f\u4e00\u7684\u8981\u6c42\u662f\uff0c\u6587\u6863\u5982\u679c\u88ab\u7528\u4e8e\u8bfe\u5802\u4e0a\u7684\u6559\u5b66\u76ee\u7684\uff0c\u5982\u679c\u4f60\u80fd\u5c06\u5b83\u5b8c\u6574\u5206\u53d1\u51fa\u53bb\uff08\u4e5f\u5c31\u662f\u8bf4\uff0c\u5305\u62ec\u6240\u6709\u7ae0\u8282\uff0c\u524d\u8a00\u4ee5\u53ca\u4ecb\u7ecd\uff09\u6211\u5c06\u611f\u6fc0\u4e0d\u5c3d\u3002\u53e6\u5916\uff0c\u5728\u4e0a\u8ff0\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u4f60\u80fd\u591f\u7ed9\u6211\u4e0b\u9762\u7559\u6709\u7684\u5730\u5740\u53d1\u4e00\u4e2a\u4fbf\u8a00\uff0c\u6211\u4f1a\u66f4\u52a0\u611f\u6fc0\u3002\u6bd5\u7adf\u6211\u5199\u8fd9\u4e2a\u7684\u76ee\u7684\u662f\u5e0c\u671b\u5b83\u5bf9\u522b\u4eba\u6709\u7528\uff0c\u65e2\u7136\u6211\u4e0d\u8ba1\u62a5\u916c\uff0c\u552f\u4e00\u7684\u5e0c\u671b\u662f\u4ece\u90a3\u4e9b\u8ba4\u4e3a\u8fd9\u4e2a\u6750\u6599\u6709\u7528\u7684\u4eba\u7684\u53cd\u9988\u8ba9\u6211\u77e5\u9053\u76ee\u6807\u81f3\u5c11\u90e8\u5206\u8fbe\u5230\u4e86\u3002 Ted Jensen Redwood City, California tjensen@ix.netcom.com July 1998","title":"\u524d\u8a00"}]}